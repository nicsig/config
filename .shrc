# What are  the tools  useful to  accelerate the learning  of a  new programming
# language?
#
#     • snippets engine (stay focused)
#     • linter
#     • formatter (stay consistent; enforce styleguide)
#     • REPL/compiler (evaluate code to check it works)
#     • integrated documentation
#     • ?



# TODO:
# Remove this file.
# Merge it with `~/.zshrc`.
# It introduces way too much confusion.
# For example, we often define an alias/function  in one file, then a second one
# in another file, both  having the same name, and we  don't notice the conflict
# which makes debugging harder in case of a problem.
# We  don't  want  to  use  bash  interactively  anyway,  so  there's  no  point
# configuring it.

# TODO:
# It would be useful to be able to search for a pattern inside all configuration
# files with `:vimgrep`. Including the ones for the shell.
# We could create symlinks inside `~/.config` which would point to the config files
# that we can't (easily) move, like `~/.bashrc` or `~/.tmux.conf`.
# But there are still a lot of  irrelevant files in `~/.config` (cache of chrome
# for example).  Think about a better way of grepping all config files.
#
# Update:
# Pre-populate the command line with the filepaths (C-g v).
# This implies that C-g v should be filetype-specific.

# TODO:
# In your functions, try to create as few temporary files as you can.
# Maybe you could eliminate some of them, using process redirection:
#
#         https://www.reddit.com/r/vim/comments/7czgrd/profiling_and_optimizing_vim/dpvzt9h/
#
# Example:
#
#                                                           ┌ last argument of the previous command,
#                                                           │ here it should be `/tmp/vim.log` (could use `$_` too)
#                                                           ├┐
#         vim -c 'q' --startuptime /tmp/vim.log && tail -n1 !$
#             vs
#         vim -c 'q' --startuptime >(tail -n1)



# TODO:
# Recomment the aliases/functions we've recovered after the loss of this file.
# Also, re-read the rest of the file.
# Maybe some parts need to be re-factored again.
# Try to remember the fixmes/todos.

# Recovered Aliases:

alias checki='sudo rlwrap checkinstall -y'
alias fzo='sh -c "$(fc -ln -1)|fzf"'

alias mount='grc mount'
# alias traceroute='grc traceroute'
traceroute() {
  grc traceroute "$1"
}

alias conky_reload='killall -SIGUSR1 conky'
alias xresources_reload='xrdb -cpp "$(command -v cpp) -traditional-cpp" ~/.Xresources'
alias web='WWW_HOME=duckduckgo.com w3m'


# Recovered Functions:
alert() {
  notify-send --urgency=low \
    -i $([[ "$?" -eq 0 ]] && printf -- 'terminal\n' || printf -- 'error\n') \
    "$(history | tail -n1 | sed -e 's/^\s*[0-9]\+\s*// ; s/[;&|]\s*alert$//')"
}

help() {
	if [[ $0 == "bash" ]]; then
		help -m "$@" | vipe
	else
		run-help "$@" | vipe
	fi
}

img_w3m() {
	w3m -o imgdisplay=/usr/lib/w3m/w3mimgdisplay "$1"
}

# Testing eNViRonment
tnvr() {
  cd "$(mktemp -d /tmp/.tvr.XXXXXXXXXX)"
  cp -R "${OLDPWD}"/* .
}

# Alias {{{1
# git {{{2

# Usage:
#     config status
#     config add /path/to/file
#     config commit -m 'my message'
#     config push
alias config='/usr/bin/git --git-dir="${HOME}/.cfg/" --work-tree="${HOME}"'

alias ga='git add'

# Do not add `rlwrap` before `git commit`.{{{
# Why?
#     1. It's not needed here.
#     2. It causes an issue.
#
# How to reproduce the issue?
#
#   1. write at the beginning of vimrc:
#
#         nno <silent> cd :sil w<cr>
#         set rtp+=~/.vim/plugged/vim-gutentags/
#         finish
#
#   2. tweak some repo
#   3. try to commit with `rlwrap git commit`
#   4. write something on the 1st line and stay on the 1st line
#   5. while the buffer is still modified, hit `cd`
#
# → the line disappears
#
# It has nothing to do with the conceal feature.
# It's reproducible without syntax highglighting.
#
# Solutions:
#
#         • nno          cd :sil w<cr>
#         • nno <silent> cd :w<cr>
#         • commit without `rlwrap`
#
# We have several mechanisms to save a buffer (including an autocmd).
# It's easier (and more future-proof) to just NOT use `rlwrap`.
#}}}
alias gc='git commit'
alias gp='rlwrap -H /dev/null git push'
# Git Restore Last Commit
alias grlc='git reset --hard "$(git rev-parse HEAD)"'

alias gs='git log --all --source -p -S'

# surfraw {{{2

alias srr='sr ixquick'
alias surfraw='surfraw -browser=w3m'

# web_local_server {{{2

alias web_local_server='python3 -m http.server'

# others {{{2

#              ┌ --no-group in a long listing, don't print group names
#              │┌ like -l, but do not list owner
#              ││ ┌ --almost-all do not list implied . and ..
#              ││ │
alias lsa='ls -GghA'
#       │
#       └ mnemonic: all

#                             ┌ --indicator-style=slash append / indicator to directories
#                             │
alias lsf='ls --color=always -p | grep -v "/$"'
#       │
#       └ mnemonic: files only

# -X    Sort alphabetically by extension, then by the rest.
#       Directories can't have an extension, so they always come first.
#       Handy to sort files from folders.
#
# Mnemnonic:    x for eXtension
alias lsx='ls -lX'

# ls folders only
#
# -1    list one file per line
# -d, --directory
#       list directory entries instead of contents,
#       and do not dereference symbolic links
#
# ls *        list everything
# ls */       list every folder and their contents
# ls -d */    list every folder (only their entries)
alias lsd='ls++ -1d */'
# n for new?
alias lsn='ls -Ggthr --time=ctime'

# o for owner?
alias lso='ls++ --potsf'
# s for size?
alias lss='ls++ --psf'
# ls by time/changes, newest at bottom
#
# -c    with  -lt:
#       sort  by,  and show, ctime (time of last modification of file status information)
#
# Mnemonic:    t for Time
alias lst='ls++ --ptsf'

