# What are  the tools  useful to  accelerate the learning  of a  new programming
# language?
#
#     • snippets engine (stay focused)
#     • linter
#     • formatter (stay consistent; enforce styleguide)
#     • REPL/compiler (evaluate code to check it works)
#     • integrated documentation
#     • ?



# TODO:
# Remove this file.
# Merge it with `~/.zshrc`.
# It introduces way too much confusion.
# For example, we often define an alias/function  in one file, then a second one
# in another file, both  having the same name, and we  don't notice the conflict
# which makes debugging harder in case of a problem.
# We  don't  want  to  use  bash  interactively  anyway,  so  there's  no  point
# configuring it.

# TODO:
# It would be useful to be able to search for a pattern inside all configuration
# files with `:vimgrep`. Including the ones for the shell.
# We could create symlinks inside `~/.config` which would point to the config files
# that we can't (easily) move, like `~/.bashrc` or `~/.tmux.conf`.
# But there are still a lot of  irrelevant files in `~/.config` (cache of chrome
# for example).  Think about a better way of grepping all config files.

# TODO:
# In your functions, try to create as few temporary files as you can.
# Maybe you could eliminate some of them, using process redirection:
#
#         https://www.reddit.com/r/vim/comments/7czgrd/profiling_and_optimizing_vim/dpvzt9h/
#
# Example:
#
#                                                           ┌ last argument of the previous command,
#                                                           │ here it should be `/tmp/vim.log`
#                                                           ├┐
#         vim -c 'q' --startuptime /tmp/vim.log && tail -n1 $_
#             vs
#         vim -c 'q' --startuptime >(tail -n1)



# TODO:
# Recomment the aliases/functions we've recovered after the loss of this file.
# Also, re-read the rest of the file. Maybe some parts need to be re-factored again.
# Try to remember the fixmes/todos.

# Recovered Aliases:

alias checki='sudo rlwrap checkinstall -y'
alias fzo='sh -c "$(fc -ln -1)|fzf"'
alias gs='git log --all --source -p -S'

# ls folders only
#
# -1    list one file per line
# -d, --directory
#       list directory entries instead of contents,
#       and do not dereference symbolic links
#
# ls *        list everything
# ls */       list every folder and their contents
# ls -d */    list every folder (only their entries)
alias lsd='ls++ -1d */'
# n for new?
alias lsn='ls -Ggthr --time=ctime'
# o for owner?
alias lso='ls++ --potsf'
# s for size?
alias lss='ls++ --psf'
# ls by time/changes, newest at bottom
#
# -c    with  -lt:
#       sort  by,  and show, ctime (time of last modification of file status information)
#
# Mnemonic:    t for Time
alias lst='ls++ --ptsf'

alias mount='grc mount'
alias traceroute='grc traceroute'

# Warning:{{{
#
# This alias shadows the `nb` binary installed by the `nanoblogger` package.
#}}}
alias nb='newsboat -q'
alias zsh_prof='repeat 10 time zsh -i -c exit'
alias conky_reload='killall -SIGUSR1 conky'
alias xresources_reload='xrdb -cpp "$(command -v cpp) -traditional-cpp" ~/.Xresources'
alias web='WWW_HOME=duckduckgo.com w3m'


# Recovered Functions:
alert() {
  local icon summary
  icon='$([[ $? -eq 0 ]] && printf -- "terminal\n" || printf -- "error\n")'
  summary="$(history | tail -n1 | sed -e 's/^\s*[0-9]\+\s*// ; s/[;&|]\s*alert$//')"
  eval "notify-send --urgency=low -i " "${icon}" '"${summary}"'
}

help() {
	if [[ $0 == "bash" ]]; then
		builtin help -m "$@" | vipe
	else
		run-help "$@" | vipe
	fi
}

img_w3m() {
	w3m -o imgdisplay=/usr/lib/w3m/w3mimgdisplay "$1"
}

vim_prof() {
  local TMP
	TMP="$(mktemp /tmp/.profile_vim.XXXXXXXXXX)"
  pushd >/dev/null
	builtin cd /tmp
	vim --cmd "prof start ${TMP}" --cmd 'prof! file ~/.vim/vimrc' -cq
	vim "${TMP}" -c 'syn off' -c 'norm +tiE' -c 'update'
  popd >/dev/null
}

vim_startup() {
  local TMP
	TMP="$(mktemp /tmp/.startup_vim.XXXXXXXXXX)"
  pushd >/dev/null
	builtin cd /tmp
  vim --startuptime "${TMP}" \
      +'q' startup_vim_file \
      && vim +'setl bt=nofile nobl bh=wipe noswf | set ft=' \
      +'sil 7,$!sort -k2' \
      +'$' "${TMP}"
  popd >/dev/null
}

# Testing eNViRonment
tnvr() {
	builtin cd "$(mktemp -d /tmp/.tvr.XXXXXXXXXX)"
	cp -R "${OLDPWD}"/* .
}

# useful to check the contents of a value of an environment variable:
#         what_is_in_var $IFS
#
# The number which is displayed in the lower right corner seems to be a weight
# in bytes.
what_is_in_var() {
	var="$1"
	printf -- "%s" "$var" | od -t c
}

# Alias {{{1
# git {{{2

# Usage:
#     config status
#     config add /path/to/file
#     config commit -m 'my message'
#     config push
alias config='/usr/bin/git --git-dir="${HOME}/.cfg/" --work-tree="${HOME}"'

alias ga='git add'

# Do not add `rlwrap` before `git commit`.{{{
# Why?
#     1. It's not needed here.
#     2. It causes an issue.
#
# How to reproduce the issue?
#
#   1. write at the beginning of vimrc:
#
#         nno <silent> cd :sil w<cr>
#         set rtp+=~/.vim/plugged/vim-gutentags/
#         finish
#
#   2. tweak some repo
#   3. try to commit with `rlwrap git commit`
#   4. write something on the 1st line and stay on the 1st line
#   5. while the buffer is still modified, hit `cd`
#
# → the line disappears
#
# It  has nothing  to do  with  the conceal  feature. It's reproducible  without
# syntax highglighting.
#
# Solutions:
#
#         • nno          cd :sil w<cr>
#         • nno <silent> cd :w<cr>
#         • commit without `rlwrap`
#
# We have several mechanisms to save a buffer (including an autocmd).
# It's easier (and more future-proof) to just NOT use `rlwrap`.
#}}}
alias gc='git commit'
alias gp='rlwrap -H /dev/null git push'
# Git Restore Last Commit
alias grlc='git reset --hard "$(git rev-parse HEAD)"'

# local_testing_server {{{2

alias local_testing_server='python3 -m http.server'

# py {{{2

alias py='/usr/local/bin/python3.7'

# surfraw {{{2

alias srr='sr ixquick'
alias surfraw='surfraw -browser=w3m'

# others {{{2

# TODO:
# How is it different than the `cdr` function in zsh?
# Is it useful?
# If it is, how to rename this  alias to move it into `~/.zshrc` without getting
# a name conflict?

# CD into most Recent accessed subdirectory in current directory
# alias cdr='cd "$(ls -dt */ | head -1)"'
#             │      ││ │    │
#             │      ││ │    └ only first entry
#             │      ││ │
#             │      ││ └ only list directories
#             │      ││
#             │      │└ sort by modification time, newest first
#             │      │
#             │      └ don't display all the contents of the directories, only their names
#             │
#             └ quote the command substitution, in case the name of the resulting directory
#               contains a space

alias emacs='emacs -nw'

# `iotop` est un outil en cli qui permet de savoir quels processus accèdent
# (lecture / écriture) au disque:
#
#     -o    seulement les processus actifs
#     -P    seulement des processus (pas les threads)
alias iotop='iotop -o -P'

#              ┌ --no-group in a long listing, don't print group names
#              │┌ like -l, but do not list owner
#              ││ ┌ --almost-all do not list implied . and ..
#              ││ │
alias lsa='ls -GghA'
#       │
#       └ mnemonic: all

#                             ┌ --indicator-style=slash append / indicator to directories
#                             │
alias lsf='ls --color=always -p | grep -v "/$"'
#       │
#       └ mnemonic: files only

# -X    Sort alphabetically by extension, then by the rest.
#       Directories can't have an extension, so they always come first.
#       Handy to sort files from folders.
#
# Mnemnonic:    x for eXtension
alias lsx='ls -lX'

# -f, --format=FORMAT
#        Change edit format of text file.
#        Available edit formats are:
#
#        `single-column'       (or `sc')
#        `dual-column'         (or `dc')
#        `destination-only'    (or `do')
#
#        The default format is dual-column.
alias qmv='qmv --format=destination-only'

alias vb='VBoxManage'

# `nethogs` is a utility showing  which processes are consuming bandwidth on our
# network interface.
alias net_watch='nethogs enp3s0'

