# How to reload the config of `xbindkeys` after changing it?{{{
#
# Use this alias:
#
#     $ xbindkeys_restart
#
# Or this command:
#
#     $ killall xbindkeys; xbindkeys -f "${HOME}/.config/xbindkeys/rc.conf"
#}}}

# -f = fullscreen
# -w = active window
"xfce4-screenshooter -f"
  Print

# Make sure to write `space` in lowercase; don't capitalize.
"rofi -show drun -modi drun"
  Control+space

# Don't quote the command substitution.{{{
#
# The arguments passed to surfraw (e.g. ‘ixquick test’) must be split.
#}}}
# What does `sr -elvi` do?{{{
#
# It prints the list of elvis supported by surfraw.
#}}}
# What about `awk`?{{{
#
# It removes the descriptions of the elvis.
#}}}
# What about `sed`?{{{
#
# It removes the lines:
#
#     GLOBAL ELVI:
#     GLOBAL ELVI:
#
# And trim the trailing whitespaces.
#}}}
# What does the `-dmenu` option passed to rofi do?{{{
#
# It makes rofi read from STDIN, and output to STDOUT.
# This allows for interactive scripts.
#}}}
# What about `-i`?{{{
#
# It makes dmenu searches case-insensitive.
#}}}
# What about `-p`?{{{
#
# It sets a prompt.
#}}}
# What about `-kb-row-select`?{{{
#
# It re-binds a key to complete the input text with the currently selected item.
# By default, `Ctrl-SPC` does that, but `Tab` seems more intuitive.
#}}}
# What about `-kb-row-tab`?{{{
#
# It re-binds a key to select the next item.
# By default, `Tab` does that, but we've just used it, so we need to find another key.
# Let's simply exchange the keys for now (`Tab` ↔ `Ctrl-SPC`).
#
# ---
#
# Note that  even if  you don't intend  to press `Ctrl-SPC`  to select  the next
# item, you still need to install this key binding.
# Otherwise, rofi will complain that:
#
# > There is already a binding matching 'Tab'
#
# and the previous binding (the one we really want) won't be installed.
#}}}
"surfraw $(sr -elvi | awk -F'-' '{ print $1 }' | sed '/^ .*:$/d; s/\s*$//' | rofi -dmenu -i -p 'Websearch' -kb-row-select 'Tab' -kb-row-tab 'Control+space')"
  Alt+Control+j

# What's this `jumpapp`?{{{
#
# A run-or-raise application switcher for any X11 desktop:
#
#     https://github.com/mkropat/jumpapp
#
# It supports several options:
#
#    ┌─────────┬──────────────────────────────────────────────────────────────────┐
#    │ -r      │ cycle through windows in reverse order                           │
#    ├─────────┼──────────────────────────────────────────────────────────────────┤
#    │ -f      │ force COMMAND to launch if process found but no windows found    │
#    ├─────────┼──────────────────────────────────────────────────────────────────┤
#    │ -n      │ do not fork into background when launching COMMAND               │
#    ├─────────┼──────────────────────────────────────────────────────────────────┤
#    │ -p      │ always launch COMMAND when ARGs passed                           │
#    │         │ (see Argument Passthrough in man page)                           │
#    ├─────────┼──────────────────────────────────────────────────────────────────┤
#    │ -L      │ list matching windows for COMMAND and quit                       │
#    ├─────────┼──────────────────────────────────────────────────────────────────┤
#    │ -t NAME │ process window has to have NAME as the window title              │
#    ├─────────┼──────────────────────────────────────────────────────────────────┤
#    │ -c NAME │ find window using NAME as WM_CLASS (instead of COMMAND)          │
#    ├─────────┼──────────────────────────────────────────────────────────────────┤
#    │ -i NAME │ find process using NAME as the command name (instead of COMMAND) │
#    ├─────────┼──────────────────────────────────────────────────────────────────┤
#    │ -w      │ only find the applications in the current workspace              │
#    ├─────────┼──────────────────────────────────────────────────────────────────┤
#    │ -R      │ bring the application to the current workspace when raising      │
#    │         │ (the default behaviour is to switch to the workspace that the    │
#    │         │ application is currently on)                                     │
#    ├─────────┼──────────────────────────────────────────────────────────────────┤
#    │ -C      │ center cursor when raising application                           │
#    └─────────┴──────────────────────────────────────────────────────────────────┘
#}}}
"jumpapp -r anki"
  Mod4+h

# Why don't you use `run-or-raise.sh` anymore?{{{
#
# Yeah, in the past, we used this:
#
#     "${HOME}/bin/run-or-raise.sh urxvt"
#       Mod4+j
#
# But now, I prefer trying `jumpapp` because:
#
#    - we can't cycle across several urxvt terminals with `run-or-raise.sh`
#
#    - we have to press Super-j *twice* to focus the terminal,
#      after having pressed Super-n to focus the webbrowser
#}}}
"jumpapp -r urxvt"
  Mod4+j

# Why `jumpapp` instead of our `run-or-raise.sh`?{{{
#
# Sometimes, our script fails to raise the firefox window, when it's minimized.
# Also, for firefox,  I prefer the default behavior of  `jumpapp`, which doesn't
# bring the window to the current virtual desktop.
#}}}
"jumpapp -r firefox"
  Mod4+k

"jumpapp -r zathura"
  Mod4+l

"jumpapp -r mpv"
  Mod4+m

"xfce4-settings-manager"
  Mod4+s

"${HOME}/bin/vim-anywhere.sh"
  Mod4+v

# If  it  doesn't work,  make  sure  your window  manager  has  not installed  a
# shadowing keyboard shortcut.
"xfce4-popup-whiskermenu"
  Alt+F1

"exo-open --launch FileManager"
  Mod4+f


