# true colors {{{1

# What does this do?{{{
#
# Well, it enables true colors.
# In st, you can check the effect of this setting by running our shell function `truecolor`.
# If you see colors from red to blue, with a smooth gradient, then it works.
#
# Note that  st is the  only terminal which we  use and which  *really* supports
# true colors (not an approximation like xterm).
#
# Technically, enabling the `RGB` feature  makes tmux set the capabilities `AX`,
# `setrgbb` and `setrgbf`.
#
#     $ tmux info | grep 'AX:\|setrgb[bf]:'
#     1: AX: (flag) true~
#     202: setrgbb: (string) \033[48;2;%p1%d;%p2%d;%p3%dm~
#     203: setrgbf: (string) \033[38;2;%p1%d;%p2%d;%p3%dm~
#
# `AX` is not documented in `man terminfo`, but it is in `terminfo.src`:
#
# >     AX is relatively straightforward; it is interpreted by ncurses to say that
# >     SGR 39/49 reset the terminal's foreground and background colors to their
# >     "default".
#
# `setrgbb` and `setrgbf` are not documented anywhere.
# I guess they are tmux-invented capabilities similar to `setab` and `setaf`...
#
# See: https://github.com/tmux/tmux/wiki/FAQ#how-do-i-use-rgb-colour
#}}}
#   Why the `if-shell ` guard?{{{
#
# Enabling `RGB` may prevent other settings to work, like these for example:
#
#     set -gw window-style        'bg=#cacaca'
#     set -gw window-active-style 'bg=#dbd6d1'
#
# The issue is specific to terminals which don't support true colors.
#
# MWE:
#
#
#      # start xfce4-terminal 0.6.3
#      $ tmux -Lx -f <(cat <<'EOF'
#          set -as terminal-features '*-256color:RGB'
#          set -gw window-style         'bg=#000000'
#          set -gw window-active-style  'bg=#ffffff'
#      EOF
#      )
#      # press:  C-b "
#      #         C-b ;
#      # result:  the color of the inactive pane is not black
#
# ---
#
# Alternatively, you could:
#
#    - use `colour123` instead of `#ab1234`
#    - use a terminal supporting true colors
#}}}
#   Why `*-256color`?{{{
#
# It should  prevent the capabilities from  being set for a  terminal supporting
# less than 256 colors; if the latter  doesn't even support 256 colors, it can't
# support true colors either.
#}}}
#   How did you achieve the same result in the past?{{{
#
#     if '[ "$COLORTERM" != "xfce4-terminal" ]' 'set -as terminal-overrides "*-256color:Tc"'
#                                                        ^^^^^^^^^^^^^^^^^^             ^^
#}}}
if '[ "$COLORTERM" != "xfce4-terminal" ]' 'set -as terminal-features "*-256color:RGB"'

# cursor shape {{{1

# What does this do?{{{
#
# For the cursor to change its shape when we enter/leave insert mode in (N)vim,
# the terminfo extensions `Ss` and `Se` need to be correctly set in `$ tmux info`.
# That's the case for some terminals (xterm,  st, urxvt, ...), but not all (e.g.
# gnome).  To be sure that the  cursor's shape can always be dynamically changed
# in  (N)Vim,  we enable  `cstyle`,  which  will make  tmux  set  `Ss` and  `Se`
# appropriately:
#
#     # start gnome-terminal
#     $ tmux -Lx
#     $ tmux info | grep 'S[se]:'
#     199: Se: (string) \033[2 q
#     215: Ss: (string) \033[%p1%d q
#
# The terminal pattern `*` is too broad, but in practice I think it's good enough.
# I don't think I ever use a terminal which doesn't support `CSI Ps SP q`.
#}}}
#   How did you achieve the same result in the past?{{{
#
#     set -as terminal-overrides '*:Ss=\E[%p1%d q:Se=\E[2 q'
#                                 │ ├┘ ├────────┘ ├┘ ├────┘
#                                 │ │  │          │  └ override with this control sequence;
#                                 │ │  │          │    restore the cursor shape to a block
#                                 │ │  │          │
#                                 │ │  │          └ `Se` capability in the terminfo db
#                                 │ │  │
#                                 │ │  └ override the current value with this new one;
#                                 │ │    set the cursor shape to the one specified by
#                                 │ │    the digit `%d`
#                                 │ │
#                                 │ └ `Ss` capability in the terminfo db (in Nvim, see `:h tui-cursor-shape`)
#                                 └ for all terminals (no matter the value of `$TERM`)
#}}}
set -as terminal-features '*:cstyle'

# cursor color {{{1

# What does this do?{{{
#
# It adds the support for OSC 12  sequences, which allow us to change the cursor
# color:
#
#     $ printf '\033]12;123\007'
#
# We rely on this to change the cursor color from Vim (by pressing `coC`).
#
# Without this  line, tmux wouldn't understand  a sequence sent by  a program to
# the terminal to set the cursor color.
#
# You can see the effect of the setting in the output of `$ tmux info`:
#
#     $ tmux info | grep 'C[sr]'
#       12: Cr: (string) \033]112\a
#       13: Cs: (string) \033]12;%p1%s\a
#
# See `man tmux /Cs`.
#}}}
#   When is it useless?{{{
#
# It's useless  for some terminals,  on the  condition that they  understand the
# sequences changing the cursor color, *and*  that their `$TERM` is `xterm` or a
# derivative.
# Because if it's `xterm`, tmux will  automatically add and set the unofficial
# extensions `Cs` and `Cr` in the terminfo db.
#}}}
#   How did you achieve the same result in the past?{{{
#
#     # 'Cs' allows to reset the cursor color
#     set -as terminal-overrides '*:Cs=\E]12;%p1%s\007'
#                                      ├─┘├┘ ├───┘├──┘
#                                      │  │  │    └ BEL
#                                      │  │  └ Pt
#                                      │  └ Ps
#                                      └ OSC
#
#     # 'Cr' allows to restore the default cursor color
#     set -as terminal-overrides '*:Cr=\E]112\007'
#
# If you wonder where we found the values of the escape sequences:
#
#     $ TERM=xterm tmux -Lx -f/dev/null
#     $ tmux info | vim -
#     /Cs
#     /Cr
#
# See also:
#
#    - `OSC Ps ; Pt BEL/;/Ps = 1 2`
#    - `OSC Ps ; Pt BEL/;/Ps = 1 1 2`
#}}}
set -as terminal-features '*:ccolour'

