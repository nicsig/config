#!/bin/sh
# Usage:{{{
#
#     $ yank
#     $ cmd | yank
#     $ yank FILE ...
#
# In the first command, write your text, then press Enter followed by C-d:
#
#     $ yank
#     hello
#     Enter
#     C-d
#}}}

# What does this script do?{{{
#
# It writes arbitrary text in the clipboard selection.
#
# The source of the text can be:
#
#    - the terminal (what you type interactively)
#    - a pipe
#    - some file(s)
#
# ---
#
# If the script is run from a shell managed by tmux, it will also write the text
# in a tmux buffer (in addition to the clipboard selection).
#
# And if the  script is run from a  shell where `$DISPLAY` is set,  it will also
# try to write the text in the clipboard selection via `$ xclip` or `$ xsel`.
#}}}
#   Where did you find it?{{{
#
# https://github.com/sunaku/home/blob/master/bin/yank
# https://sunaku.github.io/tmux-yank-osc52.html
#}}}
#   Why does it write in the clipboard selection via `$ xsel` *and* via OSC 52?{{{
#
# Most of the time, this is indeed redundant.
# That is, when you're  copying some short text from a local  shell, only one of
# these tools is necessary.
#
# However, there're 2 special cases where only one of them will work.
#
# - If the script is run locally, OSC 52 may truncate the text if it's too long (>75k).
#   In that case, `$ xsel` is useful as a more reliable fallback.
#
# - If the script is run on a remote server, there's probably no display server (Xorg).
#   In that case, `$ xsel` will fail.
#   And even if there  is a display server, you probably want to  copy the text in
#   the *local* clipboard selection, not the remote one.
#   Only OSC 52 can do that.
#}}}
#   What's its benefit over using tmux with `set-clipboard` set to 'on' or 'external'?{{{
#
# In  that  case,   the  script  is  useless  when  you   copy  some  text  with
# `copy-selection`  or `copy-pipe`  (because tmux  automatically sends  OSC 52).
# But in all other cases (see `Usage:`), the script is useful.
#}}}

# Why `$ rlwrap`?{{{
#
# It's convenient when we type the text interactively.
#}}}
# Why `$ cat`?{{{
#
# The input could be some file(s).
#}}}
#   Why does it still work when the input is not a file?{{{
#
# When the script's input is a pipe, or the terminal, `"$@"` is empty.
# And  `$ cat`,  without arguments,  reads its  standard input  – which  here is
# inherited from the script.
#
#     # the input is a pipe
#     $ echo 'text' | cat
#     text~
#
#     # the input is the terminal
#     $ cat
#     text
#     text~
#}}}
buf=$(rlwrap cat "$@")

# copy to tmux buffer {{{1

# What's this `||:`?{{{
#
# It makes sure that the script exits with the code 0, even if tmux is not running.
# https://github.com/sunaku/home/commit/cdd9a75c97d0f8c10527f4ebc856491967a2f245#diff-736f8a257c8415da60b212e37ac5cf30
#
# The `:` command has no effect, it will just succeed no matter what:
#
#     $ not_a_cmd || :
#     $ echo $?
#     0~
#
# It's documented at `$ man bash /SHELL BUILTIN COMMANDS`:
#
# > : [arguments]
# >        No effect; the command does nothing beyond  expanding  arguments
# >        and  performing any specified redirections.  A zero exit code is
# >        returned.
#}}}
[ -n "$TMUX" ] && tmux set-buffer "${buf}" ||:

# copy to clipboard selection via `$ xsel` {{{1

[ -n "$DISPLAY" ] && printf -- '%s' "${buf}" | { xsel -i -b || xclip -selection clipboard ;} ||:
#                                                      │  │{{{
#                                                      │  │
#                                                      │  └ operate on the CLIPBOARD selection.
#                                                      └ read standard input into the selection.
#}}}

# copy to clipboard selection via OSC 52 {{{1

# Don't try to set the clipboard via OSC 52 if we're in gVim.{{{
#
# gVim doesn't support OSC 52.
#
# ---
#
# As a guard, you could also try:
#
#     if [ "${TERM}" != 'dumb' ]; then
#     if [ -n "${WINDOWID}" ]; then
#}}}
if [ "${TERM}" = 'dumb' ]; then
  exit
fi

# Why not `$ wc -c <<<"${buf}"`?{{{
#
# It would add a trailing newline, and `<<<` is not supported by sh.
#}}}
len=$(printf -- "${buf}" | wc -c)
# Where does that number come from?{{{
#
# Tmux doesn't  send to  the outer  terminal any sequence  of more  than 100_000
# bytes: <https://www.mail-archive.com/tmux-users%40lists.sourceforge.net/msg05950.html>
#
# Besides, there's an overhead of 8  bytes for the header (`\033]52;c;`) and the
# footer (`\007`); so, only 99_992 bytes can be used for the text.
# Finally, the text must be base64-encoded, which adds 33% of additional overhead:
#
#     77_994 * 4/3 = 99_992

# See <https://en.wikipedia.org/wiki/Base64#Output_padding> for the
# `4*ceil(n/3)` length formula:
#
# > The ratio of output bytes to input bytes is 4:3 (33% overhead).
# ...
#}}}
max=74994
if [ "${len}" -gt "${max}" ]; then
  printf -- "$0: input is $((len - max)) bytes too long\n" >&2
fi

# Why `$ head -c`?{{{
#
# To truncate the text after `$max` bytes, in case it's too long.
# The final sequence must not exceed 100_000 bytes.
#}}}
# Why `$ tr -d '\n'`?{{{
#
# To remove the trailing newline added by `$ base64`.
#}}}
base64_encoded_text="$(printf -- "%s" "${buf}" | head -c "${max}" | base64 | tr -d '\n')"
put() {
  seq="$1"
  # Why do you wrap the OSC 52 sequence inside a DCS sequence?{{{
  #
  # Without,  the script  would fail  on a  remote machine  (or on  a local  one
  # without X or xsel / xclip) if `set-clipboard` is set to 'external'.
  #
  # This looks like a bug:
  #
  #     $ tmux set -s set-clipboard external
  #     $ printf 'foo' | xsel -i -b
  #     $ printf '\e]52;c;%s\x07' $(printf 'bar' | base64)
  #     C-S-v
  #     foo~
  #
  # But I may be wrong: https://github.com/tmux/tmux/issues/1864
  #
  # The script would also fail is `set-clipboard` is 'false' (which is expected).
  #
  # In any case, the DCS wrapper  makes the script more reliable and insensitive
  # to the value of `set-clipboard`.
  #}}}
  if [ -n "${TMUX}" ]; then
    seq="\033Ptmux;\033${seq}\033\\"
  fi
  # Why `%b`?{{{
  #
  # To make `$ printf` translate `\033` and `\007` into `Esc` and `ST`.
  # Remember  that `$  printf` translates  a backslash  escape sequence  iff the
  # latter is in the format, or in  an argument associated to `%b`; and *not* if
  # it's inside an argument bound to any other specifier (like e.g. `%s`).
  #
  # From `$ man bash /printf /%b`:
  #
  # > %b     causes printf to expand backslash escape sequences in the
  # >        corresponding argument (except that \c terminates output,
  # >        backslashes  in \', \", and \? are not removed, and octal
  # >        escapes beginning with \0 may contain up to four digits).
  #}}}
  # Is there a risk that some part of the sequence is wrongly interpreted as a backslash escape sequence (like `\007`)?{{{
  #
  # No, because the encoded text will never contain a backslash:
  # https://tools.ietf.org/html/rfc4648#section-4
  #
  # You can check yourself by encoding a large file:
  #
  #     $ base64 <~/.vim/vimrc | vim -
  #     /\
  #}}}
  printf -- '%b' "${seq}"
}
# KiTTY always appends to the clipboard, so clear it first
# https://sw.kovidgoyal.net/kitty/protocol-extensions.html#pasting-to-clipboard
put "\033]52;c;!\007"
put "\033]52;c;${base64_encoded_text}\007"
#            │
#            └ clipboard selection parameter

