#!/bin/sh

[[ -d "${HOME}/log" ]] || mkdir "${HOME}/log"
LOGFILE="${HOME}/log/$(basename "$0" .sh).log"

main() {
  cat <<EOF

-----------
$(date +%m-%d\ %H:%M)
-----------
EOF

  if pidof strace >/dev/null 2>&1; then
    # Where can I find more information about this `USR2` signal?{{{
    #
    # `$ man tmux /-v`:
    #
    # > The SIGUSR2 signal may be sent to the tmux server process
    # > to toggle logging between on (as if -v was given) and off.
    #}}}
    # Why do you use `USR2` instead of `SIGUSR2`?{{{
    #
    # Because `run` invokes sh, not bash.
    # And in sh, you need to remove the `SIG` prefix.
    # https://unix.stackexchange.com/a/199384/289772
    #}}}
    tmux display 'Stopped tmux server logging' \; \
         run 'kill -s USR2 #{pid} ; killall strace'
  else
    # Where is the logfile written?{{{
    #
    # In the cwd of the shell from which you started tmux.
    # It is *not* written in the cwd of the shell in which you press the key binding.
    # IOW, it's most probably written in your $HOME.
    #}}}
    tmux display 'Started tmux server logging' \; \
         run 'kill -s USR2 #{pid} ; strace -ttt -ostrace.txt -p #{pid}'
  fi
  # TODO: What if we have a running `$ strace` process when we use the function for the first time?{{{
  #
  # It will wrongly think tmux is being logged, and:
  #
  #    - tell us that the logging is being stopped (wrong but not harmful)
  #    - start the logging (âœ˜ contradicts what has been displayed)
  #    - kill all `$ strace` processes
  #
  # We would need a  format variable which tells us whether  tmux is being logged:
  # `#{logging}`.
  #}}}
}
main >>"${LOGFILE}" 2>&1

