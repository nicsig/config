#!/bin/bash
# How much time the compilation is expected to take?{{{
#
#   ≈ 13 min  for mpv
#   ≈ 30s     for tmux
#   ≈ 4 min   for vim
#   ≈ 2min20s for weechat
#   ≈ 2 min   for zsh
#}}}

# Vim: After an update, in case of an issue, restart Vim in a new shell!{{{
#
# Otherwise, there can be spurious bugs in the current session.
# To avoid them, start Vim from a NEW shell.
#}}}
# tmux: Do *not* compile from a commit which has not been checked by travis!{{{
#
# This kind of commit doesn't have an `autogen.sh` file.
# And I think that `$ git describe` fails on such a commit...
#}}}

# Init {{{1

PGM="$1"
# Purpose:{{{
#
# It  can be  useful to  compile  the program  against a  specific commit  hash,
# instead of the very latest version which may be buggy at the moment.
#}}}
COMMIT_HASH="$2"
GIT_REPOS="${HOME}/Vcs/"
# TODO: empty the variable once we've found a MWE for this:
# https://github.com/vim/vim/issues/7891
WITH_DEBUGGING_SYMBOLS='yes'

typeset -A URLS=( \
  [ansifilter]=https://gitlab.com/saalen/ansifilter.git \
  [ctags]=https://github.com/universal-ctags/ctags \
  [gawk]=git://git.savannah.gnu.org/gawk.git \
  [jumpapp]=https://github.com/mkropat/jumpapp \
  [mpv]=https://github.com/mpv-player/mpv-build \
  [tmux]=https://github.com/tmux/tmux \
  [trans]=https://github.com/soimort/translate-shell \
  [surfraw]=https://gitlab.com/surfraw/Surfraw \
  [vim]=https://github.com/vim/vim \
  [weechat]=https://github.com/weechat/weechat \
  [zsh]=git://git.code.sf.net/p/zsh/code \
  )

LOGDIR="${HOME}/log"
[[ -d "$LOGDIR" ]] || mkdir "$LOGDIR"
# TODO: A log file may grow too big over time.{{{
#
# This can  be an issue: Vim may  take too much time  when we open the  file, or
# when we try to fold it.
#
# Solution: Don't write the logs for compilations performed on different days in
# the same  file.  Use one  file per  day.  Also, try  to use some  utility like
# `logrotate(8)` to compress and archive  old log files.  Only keep uncompressed
# the log  file for  the current  day (or  week, or  month); compress  the rest.
# Check out how Ubuntu handles its log files in `/var/log`.
#}}}
LOGFILE="${LOGDIR}/$(basename "$0" .sh)-${PGM}.log"

# Sanitize input {{{1

if [[ -z "$PGM" ]]; then
  printf -- '%s: you must provide the name of the program you want to update\n' "$(basename "$0")" >&2
  exit 64
  #    │{{{
  #    └ EX_USAGE (64)
  #
  #    The command was used incorrectly, e.g., with the
  #    wrong number of arguments, a bad flag, a bad syntax
  #    in a parameter, or whatever.
  #
  # Source: https://www.freebsd.org/cgi/man.cgi?query=sysexits&apropos=0&sektion=0&manpath=FreeBSD+4.3-RELEASE&format=html
  #}}}

# How to check if a variable exists in a list?  https://stackoverflow.com/a/8063398/9780968
# How to negate a test with regular expressions?  https://stackoverflow.com/a/7846318/9780968
# How to get the keys of an array?  https://unix.stackexchange.com/a/91944/289772
elif [[ ! ${!URLS[@]} =~ (^|[[:space:]])"${PGM}"($|[[:space:]]) ]]; then
  printf -- '%s: the only programs this script can update are:\n' "$(basename "$0")" >&2
  # How to print array elements on separate lines?  https://stackoverflow.com/a/15692004/9780968
  printf -- '    %s\n' "${!URLS[@]}" >&2
  exit 65
  #    │{{{
  #    └ EX_DATAERR (65)
  #
  # The command was used incorrectly, e.g.,  with the wrong number of arguments,
  # a bad flag, a bad syntax in a parameter, or whatever.
  #}}}
fi

# Functions {{{1
main() { #{{{2
  print_time

  install_dependencies
  download
  clean
  # Don't remove any installed binary if we compile against a specific commit hash:{{{
  #
  # in that  case, we probably don't  want to install the  newly compiled binary
  # (we're probably just bisecting some bug).
  #}}}
  if [[ -z "$COMMIT_HASH" ]]; then
    print_version
    # Do *not* move `uninstall` after `configure` and `build`.{{{
    #
    # It would break the installation of the awk binary.
    #}}}
    uninstall
  fi
  configure
  build

  # If we've compiled against a specific commit hash, we're probably bisecting a
  # bug.  Don't install the binary.  We just need it to make some tests.
  if [[ -n "$COMMIT_HASH" ]]; then
    return
  fi
  install
  update_alternatives
  xdg_mime_default
}

print_time() { #{{{2
  time="$(date +%m-%d\ %H:%M)"
  width=${#time}
  dashes="$(printf -- '-%.0s' $(seq 1 "${width}"))"
  equals="$(printf -- '=%.0s' $(seq 1 "${width}"))"
  cat <<EOF

$dashes
$dashes
$time
$equals

EOF
}

print_title() { #{{{2
  width=${#1}
  dashes="$(printf -- '-%.0s' $(seq 1 "${width}"))"
  cat <<EOF

$1
$dashes

EOF
}

install_dependencies() { #{{{2
  print_title 'install dependencies'
  sudo aptitude install make

  if [[ "$PGM" == 'ctags' ]]; then
    # taken from `~/Vcs/ctags/docs/autotools.rst`
    sudo aptitude install \
           gcc make \
           pkg-config autoconf automake \
           python3-docutils \
           libseccomp-dev \
           libjansson-dev \
           libyaml-dev \
           libxml2-dev

  elif [[ "$PGM" == 'mpv' ]]; then
    # Warning: You probably need other packages.{{{
    #
    # I tried to find which ones in a VM, but the compilation keeps failing:
    #
    #     No OpenGL video output found or enabled. Aborting. If you really mean to compile without OpenGL video outputs use --disable-gl.~
    #
    # I suspect it has sth to do with the VM, because the output of
    # `$ glxinfo | grep OpenGL` is different there; in particular,
    # it contains:
    #
    #     OpenGL vendor string: VMware, Inc.~
    #     OpenGL renderer string: llvmpipe (LLVM 7.0, 256 bits)~
    #
    # While on the host OS, these lines are:
    #
    #     OpenGL vendor string: Intel Open Source Technology Center~
    #     OpenGL renderer string: Mesa DRI Intel(R) Ivybridge Desktop~
    #}}}
    # TODO: find all the dependencies
    # You probably need `luajit` and/or `libluajit-5.1-dev` for plugins.
    sudo aptitude install \
      autoconf \
      libfontconfig1-dev \
      libfreetype6-dev \
      libfribidi-dev \
      libtool \
      nasm \
      pkg-config \
      python3-docutils

  elif [[ "$PGM" == 'tmux' ]]; then
    # https://github.com/tmux/tmux/blob/4ce26b039386caac51abdf1bf78541a500423c18/.travis.yml#L9
    sudo aptitude install \
      autotools-dev \
      bison \
      build-essential \
      debhelper \
      dh-autoreconf \
      file \
      libevent-dev \
      libncurses5-dev \
      libutempter-dev \
      pkg-config

  elif [[ "$PGM" == 'vim' ]]; then
    # `build-dep vim` is not enough{{{
    #
    # Actually it seems it does nothing.
    # Is it because we don't uncomment the right lines in `/etc/apt/sources.list`?
    #}}}
    # In case of a missing dependency, see:
    # https://github.com/Valloric/YouCompleteMe/wiki/Building-Vim-from-source
    # TODO: Should we also install:{{{
    #
    #    - libgtk2.0-dev
    #    - libx11-dev
    #    - libxpm-dev
    #    - libxt-dev
    # ?
    #}}}
    sudo aptitude install \
      libncurses5-dev \
      luajit libluajit-5.1-dev \
      python3-dev
  fi
}

download() { #{{{2
  print_title 'download'
  [[ -d "$GIT_REPOS" ]] || mkdir -p "$GIT_REPOS"
  cd "$GIT_REPOS" || exit

  sudo aptitude install git
  if [[ ! -d "$PGM" ]]; then
    git clone "${URLS[$PGM]}" "$PGM"
  fi

  cd "$PGM" || exit
  # We may have edited some file (`configure`, `Makefile`, ...).  Stash those edits.
  # https://git-scm.com/book/en/v2/Git-Tools-Stashing-and-Cleaning
  git stash --all; git stash clear
  if [[ -n "$COMMIT_HASH" ]]; then
    git checkout -f "$COMMIT_HASH"
  # check a master branch exists (trans has no master branch)
  # https://stackoverflow.com/q/5167957/9780968
  elif git show-ref --verify --quiet refs/heads/master; then
    # https://stackoverflow.com/a/19778940/9780968
    git checkout -f master
  fi
  git pull
}

clean() { #{{{2
  print_title 'clean'
  if [[ "$PGM" == 'weechat' ]]; then
    # Clean last `cmake(1)` command:
    # https://stackoverflow.com/a/9680493/9780968
    if [[ -d 'build' ]]; then
      sudo rm -rf build
    fi
    mkdir build
    cd build || exit

  else
    sudo make clean
    sudo make distclean
  fi
}

configure() { #{{{2
  print_title 'configure'

  if [[ "$PGM" == 'ansifilter' ]]; then
    sed -i.bak 's:^PREFIX.*:PREFIX = /usr/local:' makefile

  elif [[ "$PGM" == 'ctags' ]]; then
    # taken from `~/Vcs/ctags/docs/autotools.rst`
    ./autogen.sh
    ./configure

  elif [[ "$PGM" == 'gawk' ]]; then
    # `--enable-mpfr` lets us use the `-M` command-line option.
    # Requires a package (`libmpfr4`?) which should be installed by
    # `$ aptitude build-dep gawk`.
    ./bootstrap.sh && ./configure --enable-mpfr

  elif [[ "$PGM" == 'surfraw' ]]; then
    autoreconf -f -i
    ./configure

  elif [[ "$PGM" == 'tmux' ]]; then
    # Uncomment to get more info in your backtraces.
    #     sed -i 's/-O2/-O0/' Makefile.am
    sh autogen.sh
    # TODO: When you update your OS, try to pass `--enable-utf8proc` to `./configure`.{{{
    #
    # It may fix various issues in Vim when editing a line containing some emojis
    #
    # See: https://www.youtube.com/watch?v=F91VWOelFNE&t=346s
    #
    # Note that it requires the `libutf8proc-dev` package.
    #
    # I don't do  it atm, because it seems  to cause Vim to not  draw some lines
    # when we move in the buffer opened by `:UnicodeTable`.
    # I  suspect that  the issue  comes from  our our  `libutf8proc-dev` package
    # which is way too old; we have `1.3.1` while the latest release is `2.4.0`:
    # https://juliastrings.github.io/utf8proc/releases/
    #
    # We could try to  compile from source then install, but  it would be tricky
    # to make tmux use this compiled library.
    #
    # >     You  can then  link with  the resulting  libutf8proc library  by including
    # >     -lutf8proc  in your  link flags  (...) and  #include <utf8proc.h>  in your
    # >     source code (...).
    #}}}
    ./configure

  elif [[ "$PGM" == 'vim' ]]; then
    if [[ -n "$WITH_DEBUGGING_SYMBOLS" ]]; then
      sed -i 's/#CFLAGS = -g$/CFLAGS = -g -O0/ ; s@#STRIP = /bin/true@STRIP = /bin/true@' src/Makefile
    fi
    # We only enable the python interface.{{{
    #
    # Most Vim plugins which use an interface choose the python one.
    # I only use 1 plugin which needs an interface: UltiSnips.
    # And it uses the python interface.
    #
    # Besides, since  jobs, channels and  Vim9 script have been  implemented, it
    # has been decided  to make the interfaces lower priority.   In practice, it
    # means no  new feature, and  bugs are  fixed only for  "popular" interfaces
    # like python and maybe lua.
    #}}}
    #   I want to enable the lua interface!{{{
    #
    # Then use these 2 options:
    #
    #     --enable-luainterp=dynamic
    #     --with-luajit
    #
    # ---
    #
    # `--with-luajit` doesn't make `--enable-luainterp` useless.
    #
    # Without `--enable-luainterp`, the lua interface is not enabled.
    # You can check it's working with:
    #
    #     :lua print(_VERSION)
    #
    # And that LuaJIT is available with:
    #
    #     :lua print(jit.version)
    #
    # See `:h :lua /luajit`.
    #}}}
    ./configure  \
      --enable-fail-if-missing       \
      --enable-gui=gtk2              \
      --enable-python3interp=dynamic \
      --prefix=/usr/local            \
      --with-compiledby=user
    # Those options are not necessary, because they're set by default:{{{
    #
    #     --enable-cscope
    #     --enable-multibyte
    #     --enable-terminal
    #     --with-features=huge
    #
    # Check out `$ ./configure --help`.
    #
    # ---
    #
    # `enable-gui=gtk2` is also unnecessary atm, because it's also set by default.
    # However, I prefer to be sure that gVim still uses gtk2 in the future.
    # Last time I checked, gtk3 increased the latency.
    #}}}
    # Don't use `--with-python3-config-dir`;  it's deprecated.{{{
    #
    # Check out `./configure --help`.
    #}}}

  # If you want the online documentation, add this option:{{{
  #
  #     -DENABLE_DOC:BOOL=ON                             \
  #
  # The doc should be in `/usr/share/doc/weechat/doc/en`
  #}}}
  elif [[ "$PGM" == 'weechat' ]]; then
    cmake .. -DCMAKE_BUILD_TYPE:STRING=RelWithDebInfo         \
             -DWEECHAT_HOME:STRING="${HOME}/.config/weechat"  \
             -DENABLE_MAN:BOOL=ON                             \
             -DENABLE_TESTS:BOOL=ON

  elif [[ "$PGM" == 'zsh' ]]; then
    ./Util/preconfig
    # Where did you find the configuration options?{{{
    #
    # I read the INSTALL file:
    # https://github.com/zsh-users/zsh/blob/master/INSTALL
    #
    # I also read this link:
    # https://gist.github.com/nicoulaj/715855
    #
    # I also read how the ubuntu devs compiled `zsh-5.2`:
    #
    # https://launchpad.net/ubuntu/+source/zsh
    #
    # link found by clicking on the button below “Latest upload”
    # https://launchpad.net/ubuntu/+source/zsh/5.2-5ubuntu1
    #
    # link found by clicking on the button “amd64” in the section “Builds”
    # https://launchpad.net/ubuntu/+source/zsh/5.2-5ubuntu1/+build/10653977
    #
    # link found by clicking on the button “buildlog”
    # https://launchpadlibrarian.net/280509421/buildlog_ubuntu-yakkety-amd64.zsh_5.2-5ubuntu1_BUILDING.txt.gz
    #}}}
    # How to get more information about the configuration options?{{{
    #
    #     $ ./configure --help
    #}}}
    ./configure \
      --enable-cap \
      --enable-custom-patchlevel=Debian \
      --enable-fndir=/usr/local/share/zsh/functions \
      --enable-function-subdirs \
      --enable-maildir-support \
      --enable-pcre \
      --enable-readnullcmd=pager \
      --with-tcsetpgrp \
      --with-term-lib='ncursesw tinfo' \
      LDFLAGS='-Wl,--as-needed -g'
        fi
}

build() { #{{{2
  print_title 'build'
  if [[ "$PGM" == 'mpv' ]]; then
    # Procedure to compile `mpv`:{{{
    #
    # https://github.com/mpv-player/mpv-build#generic-instructions
    #}}}
    # The readme adds the `-j4` flag, to use 4 cores.{{{
    #
    # I don't, because it would probably consume too much cpu.
    # I'm ok with a building process which takes more time (≈ 12 min).
      #}}}
    # If the build fails, check whether all dependencies are installed:{{{
    #
    # https://github.com/mpv-player/mpv-build#dependencies
    #}}}
    ./rebuild
  else
    make
    # What to do if the zsh manpages are not installed?{{{
    #
    # Try:
    #     sudo make install.info
    #     sudo make install.man
    #}}}
  fi

  # How to check whether the zsh compiled binary is working as expected?{{{
  #
  #     $ make check
  #}}}
  # If you want to test the Vim binary, try sth like this:{{{
  #
  #     $ xterm -e 'make test'
  #
  # But not this:
  #
  #     $ make test
  #
  # Because of:
  #     test1 FAILED - terminal size must be 80x24 or larger~
  #
  # Neither this:
  #
  #     $ xfce4-terminal -e 'make test'
  #
  # Because of:
  #     xfce4-terminal: Gdk-WARNING: gdk_window_set_icon_list: icons too large~
  # https://github.com/snwh/paper-icon-theme/issues/340
  #}}}
  # TODO: If a test fails, maybe we should make the script fail too.
}

print_version() { #{{{2
  # In case  of an  issue, we may  want to get  back to  a known old  and stable
  # version; we may also want to bisect the issue.
  # In both cases, knowing the previous version of the program will help.
  print_title 'current version'
  if [[ "$PGM" == 'tmux' ]]; then
    tmux -V
  elif [[ "$PGM" == 'surfraw' ]]; then
    surfraw -version
  elif [[ "$PGM" == 'jumpapp' ]]; then
    # no flag exists to get the version
    :
  else
    "$PGM" --version
  fi
}

uninstall() { #{{{2
  print_title 'uninstall'
  if [[ "$PGM" == 'mpv' ]]; then
    # https://github.com/mpv-player/mpv-build/blob/master/uninstall
    sudo ./uninstall
  else
    sudo make uninstall
  fi
}

install() { #{{{2
  print_title 'install'

  if [[ "$PGM" == 'mpv' ]]; then
    sudo ./install
  else
    sudo make install
  fi

  if [[ $PGM == 'zsh' ]] && ! grep -qx '/usr/local/bin/zsh' /etc/shells; then
    # https://unix.stackexchange.com/a/111367/289772
    echo '/usr/local/bin/zsh' | sudo tee -a /etc/shells
    # change login shell for the current user
    sudo chsh -s '/usr/local/bin/zsh' "$USER"
    # and for the root user (necessary for `$ sudo -i` to work as expected)
    sudo chsh -s '/usr/local/bin/zsh' 'root'
  fi
}

update_alternatives(){ #{{{2
  if [[ "$PGM" != 'awk' && "$PGM" != 'vim' ]]; then
    return
  fi

  print_title 'update-alternatives'
  update-alternatives --get-selections >"${LOGDIR}/update-alternatives-get-selections.bak"

  if [[ "$PGM" == 'awk' ]]; then
  # Why the `--slave` option?{{{
  #
  # So that when we run `$ man awk`, the gawk manpage is opened.
  # Otherwise it would fail, because we don't have any manpage for awk.
  #}}}
  sudo update-alternatives --log "$LOGFILE" \
    --install /usr/bin/awk awk /usr/local/bin/gawk 60 \
    --slave /usr/share/man/man1/awk.1 awk.1 /usr/local/share/man/man1/gawk.1
  # Note the order of the arguments `--log` and `--install`/`--set`.
  # `--log` should  come first because  it's an option, while  `--install` and
  # `--set` are subcommands.
  sudo update-alternatives --log "$LOGFILE" --set awk /usr/local/bin/gawk

  elif [[ "$PGM" == 'vim' ]]; then
    # Vim can be invoked with any of these commands.
    # We need to tell the system that, from now on, they're all provided by `/usr/local/bin/vim`.
    typeset -a names=(editor eview evim ex gview gvim gvimdiff rgview rgvim rview rvim vi view vim vimdiff)
    for name in "${names[@]}"; do
      # add our compiled Vim to each group of alternatives
      sudo update-alternatives --log "$LOGFILE" \
        --install /usr/bin/"${name}" "$name" /usr/local/bin/vim 60
      # set our compiled Vim to be the master link
      sudo update-alternatives --log "$LOGFILE" --set "$name" /usr/local/bin/vim
    done
  fi
}

xdg_mime_default() { #{{{2
  if [[ "$PGM" != 'vim' ]]; then
    return
  fi

  print_title 'xdg-mime default'
  # What's this `gvim.desktop`?{{{
  #
  # A file installed by the Vim package.
  # It describes which files Vim can open in the line ‘MimeType=’.
  #}}}
  # What does this command do?{{{
  #
  # It parses the default `gvim.desktop` to build and run a command such as:
  #
  #     $ xdg-mime default gvim.desktop text/english text/plain text/x-makefile ...
  #
  # In effect, it makes gVim the default program to open various types of text files.
  # This matters  when using `xdg-open(1)` or  double-clicking on the icon  of a
  # file in a GUI file manager.
  #}}}
  # Is it needed?{{{
  #
  # Once the `gvim.desktop` file is installed,  it doesn't make gVim the default
  # program for text files.
  # It just informs the system that gVim *can* open some of them.
  #}}}
  grep -i 'mimetype' /usr/local/share/applications/gvim.desktop \
    | sed 's/mimetype=//i; s/;/ /g' \
    | xargs xdg-mime default gvim.desktop
}
# }}}1
# Execution {{{1

if [[ ! -w "$LOGFILE" ]]; then
  sudo chown "$USER:$USER" "$LOGFILE"
fi

# ask for password immediately,
# so we don't have to wait for the script to ask it – possibly – much later
sudo printf '' || exit
main "$1" 2>&1 | tee -a "$LOGFILE"
tput bel

