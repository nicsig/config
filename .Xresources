! The syntax highlighting of a multi-line list item in a comment is wrong in this file.{{{
!
! This is because of `keepend`:
!
!     :syn list xdefaultsComment
!     xdefaultsComment xxx match /^!.*$/  keepend contains=xdefaultsTodo,@Spell~
!                                         ^^^^^^^
! I don't care atm, but if you do later, then redefine the item without `keepend`:
!
!     :syn clear xdefaultsComment
!     :syn match xdefaultsComment /^!.*$/  contains=xdefaultsTodo,@Spell
!}}}
! Some characters are not properly displayed！{{{
!
! Try to update xterm; compile from source if necessary.
!
! ---
!
! See also: https://unix.stackexchange.com/a/548619/289772
!}}}

! Xterm {{{1

! allow an OSC 52 sequence to set xterm's selection(s)

! What is the purpose of 'disallowedWindowOps'?{{{
!
! It's  a  resource   which  specifies  which  features  will   be  disabled  if
! 'allowWindowOps' is false.
! Its value is a comma-separated list of names or operation numbers.
!
! See `man xterm /^\s*disallowedWindowOps`.
!
! ---
!
! 'allowWindowOps' is a resource which specifies whether extended window control
! sequences should be allowed.
! These  include several  control sequences  which manipulate  the window  size or
! position, as well as reporting these values and the title or icon name.
!}}}
!   What's its default value?{{{
!
!     1,2,3,4,5,6,7,8,9,11,13,14,18,19,20,21,GetSelection,SetSelection,SetWinLines,SetXprop
!
! IOW, no operation is allowed.
!}}}
!   Why do you use this new value?{{{
!
! It lets us  send an OSC 52  sequence (stored in the `Ms`  capability) to write
! arbitrary text in  xterm's clipboard, probably because it  doesn't include the
! name 'SetSelection'.
!
! Also, this value is recommended in `man tmux /set-clipboard`:
!
! > Note  that this  feature needs  to  be enabled  in xterm(1)  by setting  the
! > resource:
!
! >       disallowedWindowOps: 20,21,SetXprop
!
! ---
!
! Basically, all operations are allowed, except:
!
!    - GetIconTitle (20): Report xterm window's icon label as a string.
!    - GetWinTitle (21): Report xterm window's title as a string.
!    - SetXprop: Set X property on top-level window.
!}}}
!   Is there an equivalent resource for urxvt?{{{
!
! I haven't found one.
! I've tried to set 'allowWindowOps' like so:
!
!     *.allowWindowOps:  true
!
! But the OSC 52 sequence still doesn't work in urxvt:
!
!     $ printf '\e]52;c;%s\x07' $(printf 'hello' | base64)
!}}}
! Why don't you simply set 'allowWindowOps' with the value 'true'?{{{
!
! Extended window control sequences can be abused in a script.
!
! It's better  to let 'allowWindowOps' with  its default value 'false',  and set
! 'disallowedWindowOps' which  lets you  fine-tune which  sequences you  want to
! allow.
!}}}
XTerm*disallowedWindowOps: 20,21,SetXprop

! By default, write in the *clipboard* selection when receiving an OSC 52 sequence.{{{
!
! Without this setting, xterm would write in the primary selection.
!
! MWE:
!
!     # start xterm
!     $ printf 'bye' | xsel -i -b
!     C-S-v
!     bye~
!     ✔
!
!     $ printf '\e]52;;%s\x07' $(printf 'hello' | base64)
!     C-S-v
!     bye~
!     ✘
!
! We should get `hello` when pressing C-S-v.
! We don't because  xterm has written `hello` in the  *primary* selection, which
! you can confirm like so:
!
!     $ xsel -p
!     hello~
!
! ---
!
! Here's how `selectToClipboard` is documented:
!
! >     Tells xterm whether to  use the PRIMARY or CLIPBOARD for  SELECT tokens in the
! >     selection  mechanism. [...]  The default  is “false”,  which tells  it to  use
! >     PRIMARY.
!}}}
!   In the previous example, can't you specify the clipboard with `c`?{{{
!
! Yes, you can:
!
!     $ printf '\e]52;c;%s\x07' $(printf 'hello' | base64)
!                     ^
!
! But it would fail inside tmux, because the latter will remove `c`.
! You can check  this by logging the  activity of the server,  and searching for
! `]52;` in the logfile.
!}}}
XTerm*selectToClipboard: true

! `$TERM` should be `xterm-256color`, so that  our programs use the full palette
! of the terminal
XTerm*termName: xterm-256color

! Make key bindings using the meta modifier work.
!
! If “true”,  Meta characters (a  character combined with the  Meta modifier
! key) are  converted into  a two-character sequence  with the  character itself
! preceded by  ESC.
XTerm*metaSendsEscape: true

! font (face and size)
XTerm*faceName: DejaVu Sans Mono
XTerm*faceSize: 20

! This *drastically* improves the bandwidth output performance of xterm.{{{
!
! It lets xterm  drop some screen updates  to catch up with the  flow, when your
! command outputs a lot of data.
!
! MWE:
!
!     $ time seq -f "the quick brown fox jumps over the lazy dog %g" 1000000
!
! In st, this command takes about 3.5 seconds.
! In xterm, it takes 70 seconds.
!
! When this resource is set to  true, xterm needs only 8 seconds; unfortunately,
! for a few seconds, the screen appears  to have stopped since it is waiting for
! a new set of screen updates after having discarded some.
!
! However, if  you run xterm in  tmux, then, not only  does it catch up  st (3.5
! seconds), but the screen doesn't appear to have stopped anymore!
!}}}
XTerm*fastScroll: true

! Let us paste the clipboard selection by pressing `C-S-v`.
! Source: https://unix.stackexchange.com/a/225076/277716
XTerm*VT100.Translations: #override \
    Ctrl Shift <Key>V: insert-selection(CLIPBOARD) \n\
    Ctrl Shift <Key>C: copy-selection(CLIPBOARD)

! Colors (for all X programs) {{{1

! enable true color in xterm{{{
!
! > If  xterm  is  compiled  with   direct-color  support,  and  the  resource
! > directColor is  true, then rather  than choosing the closest  match, xterm
! > asks the X server to directly render a given color.
!
! Source:
! http://invisible-island.net/xterm/ctlseqs/ctlseqs.html#h2-Functions-using-CSI-_-ordered-by-the-final-character_s_
!
! Useful for xterm to use the colors defined in this file.
! Without enabling  `directColor`, xterm  chooses a  black background  no matter
! what we we set up here.
!
! ---
!
! Note  that  if  xterm  was   not  compiled  with  `--enable-direct-color`,  it
! approximates a true color to the closest match in its palette.
! This compiling option is recent (xterm 331?).
!}}}
directColor: true

! To find a good palette, look here: https://terminal.sexy/
!
! When you  want to  export a  scheme, you have  to select  the export  tab, but
! *also* to click on the export button.

! Warning:
! The syntax highlighting applied by the `zsh-syntax-highlighting` plugin
! may override some of these colors for some tokens.
! Atm, it's the case for the double/single quoted strings.  They aren't colored
! by the yellow defined in this file.

! The values are mostly copied from the google light color scheme (cf. terminal.sexy).

! output of commands
*foreground: #373b41

! terminal background
! value copied from `bespin` light palette
*background: #dbd6d1

! If you change the color here, make sure to also change it in:
!
!     ~/.vim/plugged/vim-toggle-settings/autoload/toggle_settings.vim
!
! ... in `s:colorscheme()`.
*cursorColor: #373b41
! Color of the character under the cursor.{{{
!
! From `man urxvt /cursorColor2`:
!
! > cursorColor2: colour
! >     Use the specified colour for the colour of the cursor text. For
! >     this to take effect, cursorColor must also be specified. The
! >     default is to use the background colour.
!
! Value copied from: `~/.vim/plugged/seoul256.vim/urxvt/seoul256-light`
!}}}
URxvt*cursorColor2: #dadada

! If you change the colors here, try to replicate those changes in st's `config.h`,
! and in the `colorscheme#set()` function from `~/.vim/autoload/colorscheme.vim`.

! black
*color0:  #1d1f21
*color8:  #969896

! red
*color1:  #cc342b
*color9:  #cc342b

! green
*color2:  #198844
*color10: #198844

! yellow
! Values copied from: `~/.vim/plugged/seoul256.vim/urxvt/seoul256-light`
*color3:  #af8760
*color11: #d8865f

! blue
*color4:  #3971ed
*color12: #3971ed

! magenta
*color5:  #a36ac7
*color13: #a36ac7

! cyan
*color6:  #3971ed
*color14: #3971ed

! white
! If you must change `color7`, choose a readable color.{{{
!
!     https://www.w3schools.com/colors/colors_shades.asp
!
! It's used by `cmus` to color its status line.
!}}}
*color7:  #f5f5f5
*color15: #ffffff

! color of bold text{{{
!
! From `man urxvt /colorBD`
!
! > colorBD: colour
! >     Use the specified colour to display bold or italic characters when
! >     the foreground colour is the default. If font styles are not
! >     available (Compile styles) and this option is unset, reverse video
! >     is used instead.
!
! Value copied from: `~/.vim/plugged/seoul256.vim/urxvt/seoul256-light`
!}}}
URxvt*colorBD: #3a3a3a

