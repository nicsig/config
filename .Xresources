! The syntax highlighting of a multi-line list item in a comment is wrong in this file.{{{
!
! This is because of `keepend`:
!
!     :syn list xdefaultsComment
!     xdefaultsComment xxx match /^!.*$/  keepend contains=xdefaultsTodo,@Spell~
!                                         ^^^^^^^
! I don't care atm, but if you do later, then redefine the item without `keepend`:
!
!     :syn clear xdefaultsComment
!     :syn match xdefaultsComment /^!.*$/  contains=xdefaultsTodo,@Spell
!}}}

! URxvt {{{1

! TODO: Learn how to start the urxvt daemon.
! It  would  reduce the  memory  footprint  when  we  temporarily open  2  urxvt
! terminals.

! TODO: Read all of this:
! http://pod.tst.eu/http://cvs.schmorp.de/rxvt-unicode/doc/rxvt.7.pod

! TODO: In `vim-readline` we could install this mapping:{{{
!
!         exe "set <m-y>=\e[99~"
!         ino  <expr><unique>  <m-y>  readline#yank('i', 1)
!
! And here we could rebind `M-y`:
!
!         URxvt.keysym.Meta-y: \033[99~
!
! This would fix the conflict between `yank-and-pop` and `√π`.
!
! See also:
!
!     man 7 urxvt    /URxvt.keysym.Up
!     https://unix.stackexchange.com/a/76591/275162
!
! But, how  to make sure  we choose a sequence  which doesn't conflict  with any
! existing key?
!
! Update:
! It would break the keys in other programs.
! For example, M-y wouldn't work in the shell anymore.
!}}}

! set the font
! Why `,xft:Symbola`?{{{
!
! We specify a fallback font in case a character can't be displayed in DejaVu.
! Without it, the euler number `ùëí` can't be displayed.
!}}}
!¬†    Is it enough?{{{
!
! No.
! Certain characters, such as ü§î and üéâ are still not displayed.
!
! Try also to read this page in a Vim buffer:
! https://salsa.debian.org/printing-team/cups/raw/debian/master/cups/utf8demo.txt
!
! You'll notice that the characters below this line are not displayed:
!
!     Proverbs in the Amharic language:
!
! If that bothers you, you can add more fallback fonts.
!}}}
!¬†    Where can I find a solution?{{{
!
! Google: ‚Äúurxvt unicode character missing‚Äù
! First result: https://github.com/powerline/fonts/issues/176
!
! Also, see `$ man urxvt /font`.
!}}}

! How to check whether a character can be displayed by a given font?{{{
!
!    - run `$ gucharmap`
!    - select your font (e.g. `DejaVu Sans Mono`)
!    - select a size (e.g. `20`, which seems equivalent to `pixelsize=27`)
!    - search for the glyph (C-f)
!
! Note that it doesn't mean that urxvt will be able to display the character.
! urxvt has its own specific issues.
! It's just a  necessary ‚Äì but not enough  ‚Äì condition, for urxvt to  be able to
! display a character.
!}}}
! Can I use Terminus as a fallback font?{{{
!
! In theory, it should work because it's able to display the euler number:
!
!     $ sudo aptitude install xfonts-terminus
!
!     URxvt.font:  xft:Terminus:pixelsize=27
!
! In practice, it doesn't work, and I don't know why:
!
!     URxvt.font:  xft:DejaVu Sans Mono:pixelsize=27,xft:Terminus
!}}}
URxvt.font:            xft:DejaVu Sans Mono:pixelsize=27,xft:Symbola
URxvt.boldFont:        xft:DejaVu Sans Mono:bold:pixelsize=27,xft:Symbola:bold

URxvt.ItalicFont:      xft:DejaVu Sans Mono:italic:pixelsize=27,xft:Symbola:italic
URxvt.boldItalicFont:  xft:DejaVu Sans Mono:bold:italic:pixelsize=27,xft:Symbola:bold:italic

! set `$TERM`
URxvt.termName: rxvt-unicode-256color

! disable scrollbar
URxvt.scrollBar: false

! Scroll with `M-j` and `M-k`, instead of `S-PgDown` and `S-PgUp`.
! Where is the syntax `URxvt.keysym.<sym>: command: ...` documented?{{{
!
!     $ man urxvt /RESOURCES /keysym.sym: action /command:STRING
!}}}
! Where is the sequence `\033]720;1\007` documented?{{{
!
! The general form of this sequence is:
!
!     OSC Ps ; Pt ST
!     ‚îÇ           ‚îÇ
!     ‚îÇ           ‚îî \007
!     ‚îî ESC ]
!
! Here:
!
!     Ps = 720
!     Pt = 1
!
! These values are described like so:
!
!     Ps = 720   Move viewing window up by Pt lines
!     Ps = 721   Move viewing window down by Pt lines
!
! Source:
!
!     $ man 7 urxvt /RXVT-UNICODE TECHNICAL REFERENCE /XTerm Operating System Commands
!}}}
! Why did you comment these lines?{{{
!
! 1. They interfere with `M-j` and `M-k` in WeeChat.
!
! 2. They may be too easy to press by accident.
!    If that happens while in Vim, it's distracting.
!
! Find  other keysequences  to trigger  the scrolling  if you  really want  this
! functionality.
! Or just rely on tmux scrollback buffer.
! }}}
! URxvt.keysym.Meta-k: command:\033]720;1\007
! URxvt.keysym.Meta-j: command:\033]721;1\007

! How to increase the size of the scrollback buffer?{{{
!
! URxvt.saveLines: 8192
!
! Source:
!
!     $ man 7 urxvt /RXVT-UNICODE\/URXVT FREQUENTLY ASKED QUESTIONS /Terminal Configuration
!
! By default, its size is limited to 1000 lines.
!}}}

! default geometry
URxvt.geometry: 121x35
!               ‚îÇ   ‚îÇ
!               ‚îÇ   ‚îî a little bigger than $LINES
!               ‚îî a little bigger than $COLUMNS

Xft.dpi:        96
Xft.antialias:  true
Xft.rgba:       rgb
Xft.hinting:    true
Xft.hintstyle:  hintslight
Xft.autohint:   false
Xft.lcdfilter:  lcddefault

! URxvt.perl-ext-common: default,matcher
! URxvt.url-launcher: /usr/bin/xdg-open
! URxvt.matcher.button: 1
!
! URxvt.keysym.C-Delete: perl:matcher:last
! URxvt.keysym.M-Delete: perl:matcher:list
!
! URxvt.matcher.rend.0: Uline Bold fg5
!
! URxvt.colorUL: #4682b4

! Perl extensions
! Be careful about the syntax of the next line. {{{
!
! There should be no spaces between the names of the plugins.
! In  particular, no  spaces between  a  comma and  a backslash,  and no  spaces
! between a beginning of line and the name of a plugin.
!}}}

! Where are all these extensions located?{{{
!
!     /usr/local/lib/urxvt/perl/
!     ~/.urxvt/ext/
!}}}

! What does `selection-to-clipboard` do?{{{
!
! It puts the selection into the system clipboard.
!
! Select some text  in the terminal, and  you can automatically paste  it in the
! browser, pressing `C-v`.
!
! In tmux, you need to disable the mouse (pfx + M-m) for the extension to work.
!}}}
! What does `-searchable-scrollback` do?{{{
!
! It disables the `searchable scrollback`  extension, because it shadows our Vim
! mapping `M-s`.
!}}}
! What does `matcher` do?{{{
!
! It underlines arbitrary patterns and make them clickable.
! By default, it's used to make URLs clickable.
!}}}

! Why don't you use `confirm-paste` anymore?{{{
!
! In theory, it's a good protection from attacks such as this one:
!
!     https://thejh.net/misc/website-terminal-copy-paste
!
! It prompts before allowing any multi-line paste.
! In practice, it's often annoying.
!
! Besides, there's another way to deal with this issue:
! enable the bracketed paste mode in your shell.
!}}}

! What does `pasta` do?{{{
!
! We invoke it from `C-S-v`, thanks to this line:
!
!     URxvt.keysym.Control-Shift-V: perl:pasta:paste
!
! It allows us to paste the clipboard.
!
! One benefit of this perl script, is  that you can paste the text you've yanked
! from a Vim instance which you've quit.
!}}}
!   Where did you find it?{{{
!
! https://wiki.gentoo.org/wiki/Rxvt-unicode#Copy.2FPaste_and_URL_handling
!}}}
URxvt.perl-ext-common: default,\
selection-to-clipboard,\
-searchable-scrollback,\
pasta,\
matcher,\
keyboard-select,\
clipboard-osc

! Temporarily disabled.
! We need to find another key to not shadow `M-u` (readline capitalize) besides,
! the next key binding can't work because we don't have any url-select extension
! inside `/usr/lib/urxvt/perl/` nor inside `~/.urxvt/ext/`.
!
!     URxvt.keysym.M-u:     perl:url-select:select_next
!     URxvt.keysym.M-u:     perl:searchable-scrollback
URxvt.url-launcher: /usr/bin/firefox

! If you don't want URLs to be underlines, the following resource isn't enough.
! You also need to either:
!
!    - disable the perl extension `matcher` in `URxvt.perl-ext-common`
!    - tweak the resource `URxvt.matcher.pattern.0`
URxvt.underlineURLs: false
URxvt.matcher.pattern.0: urxvt_matcher_pattern_garbage

URxvt.matcher.button: 1
URxvt.keysym.M-Escape: perl:keyboard-select:activate
! TODO:
! We can  paste some text  selected in firefox by  pressing shift and  the mouse
! wheel; how to do the same with a key binding which doesn't involve the mouse?
URxvt.keysym.Control-Shift-V: perl:pasta:paste

! disable picture insert mode and ISO 14755 mode
! these modes prevent us from pasting with C-S-v
!
!     https://wilmer.gaa.st/blog/archives/36-rxvt-unicode-and-ISO-14755-mode.html#c289

URxvt.iso14755: false
URxvt.iso14755_52: false

! Xterm {{{1

! allow an OSC 52 sequence to set xterm's selection(s)

! Technically, what is 'disallowedWindowOps'?{{{
!
! A resource which specifies which features will be disabled if 'allowWindowOps' is false.
! Its value is a comma-separated list of names or operation numbers.
!}}}
!   What's this 'allowWindowOps'?{{{
!
! A resource which specifies whether extended window control sequences should be
! allowed.
! These  include several  control sequences  which manipulate  the window  size or
! position, as well as reporting these values and the title or icon name.
!}}}
!¬†    Why is it better to set 'disallowedWindowOps'?{{{
!
! Extended window control sequences can be abused in a script, which is probably
! why its default value is ‚Äúfalse‚Äù.
!
! 'disallowedWindowOps' allows you to fine-tune which sequence you want to allow.
!}}}

!   What's its default value?{{{
!
!     1,2,3,4,5,6,7,8,9,11,13,14,18,19,20,21,GetSelection,SetSelection,SetWinLines,SetXprop
!
! IOW, no operation is allowed.
!}}}
!   Why do you use this new value?{{{
!
! It's recommended in `$ man tmux /set-clipboard`:
!
! > Note  that this  feature needs  to  be enabled  in xterm(1)  by setting  the
! > resource:
!
! >       disallowedWindowOps: 20,21,SetXprop
!
! ---
!
! Basically, all operations are allowed, except:
!
!    - GetIconTitle (20): Report xterm window's icon label as a string.
!    - GetWinTitle (21): Report xterm window's title as a string.
!    - SetXprop: Set X property on top-level window.
!}}}
XTerm*disallowedWindowOps: 20,21,SetXprop

! Write in the *clipboard* selection, by default, when receiving an OSC 52 sequence.{{{
!
! Without this setting, xterm would write in the primary selection.
!
! MWE:
!
!     # start xterm
!     $ printf 'bye' | xsel -i -b
!     C-S-v
!     bye~
!     ‚úî
!
!     $ printf '\e]52;;%s\x07' $(printf 'hello' | base64)
!     C-S-v
!     bye~
!     ‚úò
!
! We should get `hello` when pressing C-S-v.
! We don't because  xterm has written `hello` in the  *primary* selection, which
! you can confirm like so:
!
!     $ xsel -p
!     hello~
!
! ---
!
! Here's how `selectToClipboard` is documented:
!
! > Tells xterm whether to  use the PRIMARY or CLIPBOARD for  SELECT tokens in the
! > selection  mechanism. [...]  The default  is ‚Äúfalse‚Äù,  which tells  it to  use
! > PRIMARY.
!}}}
!   In the previous example, can't you specify the clipboard with `c`?{{{
!
! Yes, you can:
!
!     $ printf '\e]52;c;%s\x07' $(printf 'hello' | base64)
!                     ^
!
! But it would fail inside tmux, because the latter will remove `c`.
! You can check this like so:
!
!    1. turn on the logging of the tmux server
!    2. run the previous `$ printf` command
!    3. turn off the logging
!    4. read the logfile
!    5. search for the pattern `]52;`
!}}}
XTerm*selectToClipboard: true

! `$TERM` should be `xterm-256color`, so that  our programs use the full palette
! of the terminal
XTerm*termName: xterm-256color

! Make key bindings using the meta modifier work.
!
! If ‚Äútrue‚Äù,  Meta characters (a  character combined with the  Meta modifier
! key) are  converted into  a two-character sequence  with the  character itself
! preceded by  ESC.
XTerm*metaSendsEscape: true

! font (face and size)
XTerm*faceName: DejaVu Sans Mono
XTerm*faceSize: 20

! This *drastically* improves the bandwidth output performance of xterm.{{{
!
! It allows xterm  to drop some screen  updates to catch up with  the flow, when
! your command outputs a lot of data.
!
! MWE:
!
!     $ time seq -f "the quick brown fox jumps over the lazy dog %g" 1000000
!
! In st, this command takes about 3.5 seconds.
! In xterm, it takes 70 seconds.
!
! When this resource is set to  true, xterm needs only 8 seconds; unfortunately,
! for a few seconds, the screen appears  to have stopped since it is waiting for
! a new set of screen updates after having discarded some.
!
! However, if  you run xterm in  tmux, then, not only  does it catch up  st (3.5
! seconds), but the screen doesn't appear to have stopped anymore!
!}}}
XTerm*fastScroll: true

! Let us paste the clipboard selection by pressing `C-S-v`.
! Source: https://unix.stackexchange.com/a/225076/277716
XTerm*VT100.Translations: #override \
                 Ctrl Shift <Key>V:    insert-selection(CLIPBOARD) \n\
                 Ctrl Shift <Key>C:    copy-selection(CLIPBOARD)

! Colors (for all X programs) {{{1

! enable true color in xterm{{{
!
! > If  xterm  is  compiled  with   direct-color  support,  and  the  resource
! > directColor is  true, then rather  than choosing the closest  match, xterm
! > asks the X server to directly render a given color.
!
! Source:
! http://invisible-island.net/xterm/ctlseqs/ctlseqs.html#h2-Functions-using-CSI-_-ordered-by-the-final-character_s_
!
! Useful for xterm to use the colors defined in this file.
! Without enabling  `directColor`, xterm  chooses a  black background  no matter
! what we we set up here.
!
! ---
!
! Note  that  if  xterm  was   not  compiled  with  `--enable-direct-color`,  it
! approximates a true color to the closest match in its palette.
! This compiling option is recent (xterm 331?).
!}}}
directColor: true

! To find a good palette, look here: https://terminal.sexy/
!
! When you  want to  export a  scheme, you have  to select  the export  tab, but
! *also* to click on the export button.

! Warning:
! The syntax highlighting applied by the `zsh-syntax-highlighting` plugin
! may override some of these colors for some tokens.
! Atm, it's the case for the double/single quoted strings. They aren't colored
! by the yellow defined in this file.

! The values are mostly copied from the google light color scheme (cf. terminal.sexy).

! output of commands
*foreground: #373b41

! terminal background
! value copied from `bespin` light palette
*background: #dbd6d1

! If you change the color here, make sure to also change it in:
!
!     ~/.vim/plugged/vim-toggle-settings/autoload/toggle_settings.vim
!
! ... in `s:colorscheme()`.
*cursorColor: #373b41
! Color of the character under the cursor.{{{
!
! From `$ man urxvt /cursorColor2`:
!
! > cursorColor2: colour
! >     Use the specified colour for the colour of the cursor text. For
! >     this to take effect, cursorColor must also be specified. The
! >     default is to use the background colour.
!
! Value copied from: `~/.vim/plugged/seoul256.vim/urxvt/seoul256-light`
!}}}
URxvt*cursorColor2: #dadada

! If you change the colors here, try to replicate those changes in st's `config.h`,
! and in the `colorscheme#set()` function from `~/.vim/autoload/colorscheme.vim`.

! black
*color0:  #1d1f21
*color8:  #969896

! red
*color1:  #cc342b
*color9:  #cc342b

! green
*color2:  #198844
*color10: #198844

! yellow
! Values copied from: `~/.vim/plugged/seoul256.vim/urxvt/seoul256-light`
*color3:  #af8760
*color11: #d8865f

! blue
*color4:  #3971ed
*color12: #3971ed

! magenta
*color5:  #a36ac7
*color13: #a36ac7

! cyan
*color6:  #3971ed
*color14: #3971ed

! white
! If you must change `color7`, choose a readable color.{{{
!
!     https://www.w3schools.com/colors/colors_shades.asp
!
! It's used by `cmus` to color its status line.
!}}}
*color7:  #f5f5f5
*color15: #ffffff

! color of bold text{{{
!
! From `$ man urxvt /colorBD`
!
! > colorBD: colour
! >     Use the specified colour to display bold or italic characters when
! >     the foreground colour is the default. If font styles are not
! >     available (Compile styles) and this option is unset, reverse video
! >     is used instead.
!
! Value copied from: `~/.vim/plugged/seoul256.vim/urxvt/seoul256-light`
!}}}
URxvt*colorBD: #3a3a3a

