# Import all python functions, defined in our custom module:{{{
#
#	  ~/.vim/pythonx/snippet_helpers.py
#
# … inside the snippets of the current file.
#}}}
global !p
from snippet_helpers import *
endglobal

# header {{{1

snippet header "" bm


< ${1:tag name} >`!p
snip.rv = '_' * (74 - len(t[1]))
`~
`!p
snip.rv = ' ' * (78 - len(t[1]))
`*`!p
snip.rv = t[1].replace(' ', '-')
`*


$0
endsnippet

# headline {{{1

# Broken down:{{{
#
#     `!p …`  python interpolation
#
#
#     re.search('(.*)\.', snip.buffer[0]).group(1)
#     └───────┤  └────┤   └────────────┤  └──────┤
#             │       │                │         └ and give me the first capturing group
#             │       │                │
#             │       │                └ ... inside the first line of the buffer
#             │       │
#             │       └ look for this pattern:  some text before a dot ...
#             │
#             └ invoke the `search()` method from the `re` module
#               to look for a pattern in a string
#
#
#     try:
#     ...
#     except AttributeError:
#     ...
#
#             If,  unexpectedly, the  pattern `(.*)\.`  doesn't match  the first
#             line of  the buffer,  the first capturing  group won't  exist, and
#             `.group(1)`  will  raise  an `AttributeError`  exception. We  must
#             catch it.
#}}}
snippet headline "" bm
`!p
snip.rv = ' ' * (76 - len(t[1]) - len(t[2]))
` *${1:`!p
try:
    snip.rv = re.search('(.*)\.', snip.buffer[0]).group(1)
except AttributeError:
    snip.rv = ''
`}-${2:`!v snippets#get_lg_tag_number()`}*
${3:TOPIC} `!p
snip.rv = ' ' * (75 - len(t[1]) - 2 * len(t[3]))
` *$1-${3/ /-/g}*
==============================================================================

$0
endsnippet

# toc {{{1

snippet toc "Table Of Contents" bm
${1:file}.txt    $1    Last change: `date +%B\ %d\ %Y`
${1/.*/\U$0\E/} - TABLE OF CONTENTS `!p
snip.rv = ' ' * (78 - 3*len(t[1]) - 27)
` *$1* *$1-toc*
==============================================================================
$0
endsnippet
