https://github.com/mhinz/vim-galore

Read to look for noteworthy future plugins:
https://github.com/mhinz/vim-galore/blob/master/PLUGINS.md

==============================================================================
Completion?

   <c-x><c-i> keywords from current and included files      :h i^x^i
   <c-x><c-d> definitions or macros                         :h i^x^d
   <c-x><c-u> user defined (as specified in 'completefunc') :h i^x^u
   <c-x><c-o> omni completion (as specified in 'omnifunc')  :h i^x^o

   Dictionary completion is useful to complete a word after typing its start.
   Contrary to an abbreviation, the start can be any beginning substring of a word.
   The path to the dictionary must be specified with the option 'dictionary'.

   People might be confused about the difference between user defined completion
   and omni completion, but technically they do the same thing.

   They take a function that inspects the  current position and return a list of
   suggestions.

   User  defined completion  is  defined  by the  user  for  their own  personal
   purposes.

   (Surprise!) It could be anything.

   Omni  completion is  meant  for filetype-specific  purposes, like  completing
   struct members or class methods, and is often set by filetype plugins.

FUNCTIONS FOR FINDING COMPLETIONS           *complete-functions*

This applies to 'completefunc' and 'omnifunc'.

Si on veut que la fonction soit réinvoquée dès qu'on modifie le texte pour lequel
on a initialement demandé une complétion, au lieu de retourner une liste de
matchs possibles, la fonction doit retourner le dico suivant:

    return {'words': mylist, 'refresh': 'always'}

Si la fonction échoue à auto-compléter, elle peut retourner 3 codes d'erreurs spéciaux
que Vim interprétera de façon différente:

   -1    annulation avec message d'erreur
   -2    annulation silencieuse en restant en mode complétion
   -3    annulation silencieuse en quittant le mode complétion


                        *complete-items*
Each list item can either be a string or a Dictionary.  When it is a string it
is used as the completion.  When it is a Dictionary it can contain these items:

    word        the text that will be inserted, mandatory

    abbr        abbreviation of "word"; when not empty it is used in
                the menu instead of "word"

    menu        extra text for the popup menu, displayed after "word"
                or "abbr"

    info        more information about the item, can be displayed in a
                preview window

    kind        single letter indicating the type of completion

    icase       when non-zero case is to be ignored when comparing
                items to be equal; when omitted zero is used, thus
                items that only differ in case are added

    dup         when non-zero this match will be added even when an item with the same word is already present.

    empty       when non-zero this match will be added even when it is
                an empty string

The "menu" item is  used in the popup menu and may be  truncated, thus it should
be relatively short.

The "info" item can  be longer, it will be displayed in  the preview window when
"preview" appears in 'completeopt'.

The  "info" item  will  also remain  displayed  after the  popup  menu has  been
removed.

This is useful for function arguments.

Use a single space for "info" to remove existing text in the preview window.

The size of the preview window is  three lines, but 'previewheight' is used when
it has a value of 1 or 2.

The "kind" item uses a single letter to indicate the kind of completion.  This
may be used to show the completion differently (different color or icon).
Currently these types can be used:

    v   variable
    f   function or method
    m   member of a struct or class
    t   typedef
    d   #define or macro

==============================================================================
Clipboard

Clipboard usage (Windows, OSX)

   Windows comes with a [194]clipboard and OSX comes with a [195]pasteboard.

   Both work like  most users would expect them to  work. You copy selected text
   with ctrl+c/cmd+c and paste them in another application with ctrl+v/cmd+v.

   Note that  copied text is actually  transferred to the clipboard,  so you can
   close the application  you copied from before pasting  in another application
   without problems.

   Whenever  this  happens,  the  clipboard  register *  gets  filled  with  the
   selection. From Vim  use "*y  and "*p  to yank and  paste from  the clipboard
   respectively.

   If you don't  even want to specify the  * register all the time,  put this in
    your vimrc:     set clipboard=unnamed

   Usually  all  yank/delete/put operations  fill  the  "  register, now  the  *
   register is used  for the same operations,  therefore simply y and  p will be
   enough.

   Let me repeat: Using the option above  means that every yank/paste, even when
   only  used in  the same  Vim window,  will alter  the clipboard.   Decide for
   yourself if this is useful or not.

   If you're even too lazy to type y, you can send every visual selection to the
   clipboard by using these settings:

        set clipboard=unnamed,autoselect
        set guioptions+=a

   Related help files:

        :h clipboard-unnamed
        :h autoselect
        :h 'go_a'

Clipboard usage (Linux, BSD, ...)

   If your OS uses [196]X, things  work a bit different. X implements the [197]X
   Window System  Protocol which happens to  be at major version  11 since 1987,
   hence X is also often called X11.

   Prior, in  X10, [198]cut buffers were  introduced that kind of  worked like a
   clipboard as in copied  text was actually hold by X and  it was accessible by
   all ofter  applications. This mechanism  still exists  in X,  but its  use is
   deprecated now and most software doesn't use it anymore.

   Nowadays  data   is  transferred  between   applications  by  the   means  of
   [199]selections. From  the 3  selection atoms  defined,  only 2  are used  in
   practice: PRIMARY and CLIPBOARD.

   Selections work roughly like this:

        Program A: <ctrl+c>
        Program A: assert ownership of CLIPBOARD
        Program B: <ctrl+v>
        Program B: note that ownership of CLIPBOARD is hold by Program A
        Program B: request data from Program A
        Program A: respond to request and send data to Program B
        Program B: receives data from Program A and inserts it into the window

        ┌───────────┬───────────────────────────┬────────────────────────────┬─────────────────────────┐
        │ Selection │ When used?                │ How to paste?              │ How to access from Vim? │
        ├───────────┼───────────────────────────┼────────────────────────────┼─────────────────────────┤
        │ PRIMARY   │ Selecting text            │ middle-click, shift+insert │ * register              │
        ├───────────┼───────────────────────────┼────────────────────────────┼─────────────────────────┤
        │ CLIPBOARD │ Selecting text and ctrl+c │ ctrl+v                     │ + register              │
        └───────────┴───────────────────────────┴────────────────────────────┴─────────────────────────┘

   NOTE: Selections (no, not even the CLIPBOARD selection) are never kept in the
   X server! Thus  you lose  the data  copied with  ctrl+c when  the application
   closes.

   Use "*p to  paste the PRIMARY selection  or "+y1G to yank the  entire file to
   the CLIPBOARD selection.

   If you  happen to  access one  of the  two registers  all the  time, consider
   using:

        set clipboard^=unnamed      " * register
        " or
        set clipboard^=unnamedplus  " + register

   This will  make all yank/delete/put operations  use either * or  + instead of
   the unnamed register  ". Afterwards you can  simply use y or  p for accessing
   your chosen X selection.

   Related help:

        :h clipboard-unnamed
        :h clipboard-unnamedplus

==============================================================================
Handling backup, swap, undo, and viminfo files

   Depending on the options, Vim creates up to 4 kinds of working files.

   Backup files:

   You can  tell Vim to  keep a  backup of the  original file before  writing to
   it. By default Vim keeps a backup  but immediately removes it when writing to
   the file  was successful  (:set writebackup). If you  always want  the latest
   backup file to persist, :set  backup. Or you disable backups altogether, :set
   nobackup nowritebackup.

   Let's see what I added last to my vimrc..

$ diff ~/.vim/vimrc ~/.vim/files/backup/vimrc-vimbackup
390d389
< command! -bar -nargs=* -complete=help H helpgrep <args>

   Related help: :h backup

   Swap files:

   You  came  up  with an  idea  for  the  best  scifi novel  ever. After  being
   in  the  flow for  hours  and  writing  several  thousands of  words..  power
   outage! That's  the  moment  you  realize   that  the  last  time  you  saved
   ~/wicked_alien_invaders_from_outer_space.txt was.. well, you never did.

   But not all hope  is lost! When editing a file, Vim creates  a swap file that
   contains unsaved  changes. Try it  for yourself,  open any  file and  get the
   current  swap file  by using  :swapname. You can  also disable  swap file  by
   putting :set noswapfile in your vimrc.

   By default the swap file is created  in the same directory as the edited file
   and called  something like  .file.swp, updated either  all 200  characters or
   when you  haven't typed  anything for  4 seconds, and  deleted when  you stop
   editing the file. You  can change these numbers with :h  'updatecount' and :h
   'updatetime'.

   Due to  the power  outage, the  swap file  was never  deleted. If you  do vim
   ~/wicked_alien_invaders_from_outer_space.txt, Vim will  prompt you to recover
   the file.

   Related help: :h swap-file and :h usr_11

   Undo files:

   The [200]undo tree is kept in memory  and will be lost when Vim quits. If you
   want it to  persist, :set undofile. This will save the  undo file for ~/foo.c
   in ~/foo.c.un~.

   Related help: :h 'undofile' and :h undo-persistence

   Viminfo file:

   When backup,  swap, and undo  files are all  about text state,  viminfo files
   are  used for  saving  everything  else that  would  otherwise  be lost  when
   quitting Vim. The viminfo file keeps histories (command line, search, input),
   registers, marks, buffer list, global variables etc.

   By default the viminfo is written to ~/.viminfo.

   Related help: :h viminfo and :h 'viminfo'
     _____________________________________________________________________________________________________

   If you're anything like me, you prefer keeping all these files in the same place, e.g. ~/.vim/files:

        set backup
        set backupdir   =$HOME/.vim/files/backup/
        set backupext   =-vimbackup
        set backupskip  =
        set directory   =$HOME/.vim/files/swap//
        set updatecount =100
        set undofile
        set undodir     =$HOME/.vim/files/undo/
        set viminfo     ='100,n$HOME/.vim/files/info/viminfo

   The directory ~/.vim/files  has to be created beforehand,  otherwise Vim will
   spew errors. If you often work on new hosts, you might want to automate it:

        if exists('*mkdir') && !isdirectory($HOME.'/.vim/files')
            call mkdir($HOME.'/.vim/files')
        endif

   NOTE: If you edit  a file on a  multi-user system and Vim prompts  you that a
   swap file already exists, it probably  means that someone else is editing the
   file at the moment. You lose this "feature"  when you save your swap files in
   the home directory.

==============================================================================
Editing remote files

   Vim comes with  the netrw plugin that enables  editing remote files. Actually
   it transfers  the remote  file to  a local  temporary file  via scp,  opens a
   buffer using  that file, and  writes the changes back  to the remote  file on
   saving.

   This is extremely useful if you  want to use your local configuration opposed
   to ssh'ing into a server and use whatever the admins want you to use.

       :e scp://bram@awesome.site.com/.vimrc

   If you have a ~/.ssh/config set up already, this gets used automatically:

        Host awesome
            HostName awesome.site.com
            Port 1234
            User bram

   Assuming the above content in ~/.ssh/config, this works just as well:

        :e scp://awesome/.vimrc

   Similar can be done with a ~/.netrc, see :h netrw-netrc.

   Make sure to read :h netrw-ssh-hack and :h g:netrw_ssh_cmd.

   Another  possibility is  using [201]sshfs  which  uses [202]FUSE  to mount  a
   remote filesystem into your local filesystem.

==============================================================================
MatchIt

   Since  Vim is  written in  C,  a lot  of  features assume  C-like syntax.  By
   default, if  your cursor  is on {  or #endif, you  can use  % to jump  to the
   corresponding } or #ifdef respectively.

   Vim comes  bundled with a plugin  called matchit.vim which is  not enabled by
   default. It makes % also cycle through HTML tags, if/else/endif constructs in
   VimL etc. and introduces a few new commands.

   To always load the plugin, put this in your vimrc:

        if !exists('g:loaded_matchit')
            runtime macros/matchit.vim
        endif

   Since the documentation of matchit is pretty extensive, I suggest also doing the following once:

        :!mkdir -p ~/.vim/doc
        :!cp $VIMRUNTIME/macros/matchit.txt ~/.vim/doc
        :helptags ~/.vim/doc

   The  plugin is  ready to  use  now. See  :h matchit-intro  for the  supported
   commands and :h matchit-languages for the supported languages.

   That said, it's easy to define your own matching pairs:

       autocmd FileType python let b:match_words = '\<if\>:\<elif\>:\<else\>'

   Afterwards you can cycle through these 3 statements in any Python file by using % (forward) or g% (backward).

   Related help:

        :h matchit-install
        :h matchit
        :h b:match_words

==============================================================================
Tips

Saner CTRL-L

   By default <c-l> clears and redraws the screen (like :redraw!). The following
   mapping does the same, plus de-highlighting  the matches found via /, ? etc.,
   plus  fixing syntax  highlighting (sometimes  Vim loses  highlighting due  to
   complex highlighting rules),  plus force updating the  syntax highlighting in
   diff mode:

       nnoremap <leader>l :nohlsearch<cr>:diffupdate<cr>:syntax sync fromstart<cr><c-l>

Disable audible and visual bells

    set noerrorbells
    set novisualbell
    set t_vb=

Quickly jump to header or source file

   This technique can probably be applied to many filetypes.
   It sets file  marks (see :h marks)  when leaving a source or  header file, so
   you can quickly jump back to the last  accessed one by using 'C or 'H (see :h
   'A).

        autocmd BufLeave *.{c,cpp} mark C
        autocmd BufLeave *.h       mark H

   NOTE: The info is saved in the viminfo file, so make sure that :set viminfo? includes :h viminfo-'.

Quickly change font size in GUI

   I think this was taken from tpope's config:

        com Bigger  :let &guifont = substitute(&guifont, '\d\+$', '\=submatch(0)+1', '')
        com Smaller :let &guifont = substitute(&guifont, '\d\+$', '\=submatch(0)-1', '')

==============================================================================
Debugging

General tips

   If you encounter a strange behaviour, try reproducing it like this:

        vim -u NONE -N

   This will start Vim without vimrc (thus default settings) and in nocompatible
   mode (which makes it use Vim defaults instead of vi defaults).
   See :h --noplugin for other combinations of what to load at start.

   Plugins often introduce new/changed/faulty behaviour.
   E.g. if it  happens on saving, check  :verb au BufWritePost to get  a list of
   potential culprits.

Profiling startup time

   Vim startup feels slow? Time to crunch some numbers:

        vim --startuptime /tmp/startup.log +q && vim /tmp/startup.log

   The first column is the most important as it shows the elapsed absolute time.
   If there is a big jump in time between two lines, the second line is either a
   very big file or a file with faulty VimL code that is worth investigating.

Profiling at runtime

   Vim provides  a built-in capability for  profiling at runtime and  is a great
   way to find slow code in your environment.

   The :profile command takes a bunch of sub-commands for specifying what to profile.

   If you want to profile everything, do this:

        :profile start /tmp/profile.log
        :profile file *
        :profile func *
        <do something in Vim>
        <quit Vim>

   Vim keeps the profiling  information in memory and only writes  it out to the
   logfile on exit.
   Neovim has fixed this using :profile dump.

   Have a look at /tmp/profile.log.
   All code that was executed during profiling will be shown.
   Every line, how often it was executed and how much time it took.

   Most of the time that will be plugin code the user isn't familiar with, but if you're investigating a certain issue, jump to the bottom of the log. Here are two different sections FUNCTIONS SORTED ON TOTAL TIME and FUNCTIONS SORTED ON SELF TIME that are worth gold. On a quick glance you can see, if a certain function is taking too long.

Verbosity

   Another useful way for observing what Vim is currently doing is increasing the verbosity level. Currently Vim supports 9 different levels.  See :h 'verbose' for the full list.

        :e /tmp/foo
        :set verbose=2
        :w
        :set verbose=0

   This would show all the files that get sourced, e.g. the undo file or various plugins that act on saving.

   If you only want increase verbosity for a single command, there's also :verbose, which simply gets put in front of any other command. It takes the verbosity level as count and defaults to 1:

        :verb set verbose
        "  verbose=1
        :10verb set verbose
        "  verbose=10

   It's very often used with its default verbosity level 1 to show where an option was set last:
:verb set ai?
"      Last set from ~/.vim/vimrc

   Naturally, the higher the verbosity level the more overwhelming the output. But fear no more, you can simply redirect the output to a file:

        :set verbosefile=/tmp/foo | 15verbose echo "foo" | vsplit /tmp/foo

Debugging Vim scripts

   If you ever used a command-line debugger before, :debug will quickly feel familiar.

   Simply  prepend :debug  to any  other command  and you'll  be put  into debug
   mode. That is, the execution will stop at the first line about to be executed
   and that line will be displayed.

   See :h >cont and  below for the 6 available debugger  commands and note that,
   like in gdb and  similar debuggers, you can also use  their short forms, that
   is c, q, n, s, i, and f.

   Apart from that those, you're free to  use any Vim command, e.g. :echo myvar,
   which gets executed in the context of the current position in the code.

   You basically get a [220]REPL by simply using :debug 1.

   It would be a pain if you had to single-step through every single line, so of
   course we  can define breakpoints, too. (Breakpoints  are called breakpoints,
   because the execution  stops when they're hit, thus you  can simply skip code
   you're not interested in.) See :h  :breakadd, :h :breakdel, and :h :breaklist
   for further details.

   Let's assume you want to know what code is run every time you save a file:

:au BufWritePost
" signify  BufWritePost
"     *         call sy#start()
:breakadd func *start
:w
" Breakpoint in "sy#start" line 1
" Entering Debug mode.  Type "cont" to continue.
" function sy#start
" line 1: if g:signify_locked
>s
" function sy#start
" line 3: endif
>
" function sy#start
" line 5: let sy_path = resolve(expand('%:p'))
>q
:breakdel *

   As you can see, using <cr> will repeat the previous debugger command, s in this case.

   :debug can be used in combination with the [221]verbose option.

Debugging syntax files

   Syntax files  are often the cause  for slowdowns due to  wrong and/or complex
   regular expressions.
   Vim provides the  super useful :syntime command.

        :syntime on
        " hit <c-l> a few times to redraw the window which causes the syntax rules to get applied again
        :syntime off
        :syntime report

   The output contains important metrics.
   E.g. you can see which regexp takes too long and should be optimized or which
   regexps are used all the time but never even match.

   See :h :syntime.

==============================================================================
Standard plugins

   Surprising to  many people, Vim  comes with a handful  of plugins on  its own
   that all get loaded by default. Check  :scriptnames after starting Vim to see
   all sourced files.

   Most of them will  never get used, so disable them as  you see fit. They will
   still be shown as sourced, but only  the first lines actually get read before
   Vim bails out. No further code (mappings, commands, logic) will be processed.

     Plugin          Disable it using..                        Help
   2html      let g:loaded_2html_plugin = 1     :h 2html
   getscript  let g:loaded_getscriptPlugin = 1  :h pi_getscript
   gzip       let g:loaded_gzip = 1             :h pi_gzip
   logipat    let g:loaded_logipat = 1          :h pi_logipat
   matchparen let g:loaded_matchparen = 1       :h pi_paren
   netrw      let g:loaded_netrwPlugin = 1      :h pi_netrw
   rrhelper   let g:loaded_rrhelper = 1         :e $VIMRUNTIME/plugin/rrhelper.vim
   spellfile  let g:loaded_spellfile_plugin = 1 :h spellfile.vim
   tar        let g:loaded_tarPlugin = 1        :h pi_tar
   vimball    let g:loaded_vimballPlugin = 1    :h pi_vimball
   zip        let g:loaded_zipPlugin = 1        :h pi_zip

==============================================================================
Quirks

Editing small files is slow

   There are two things which can have a huge impact on performance:
    1. Complex regular expressions. Particular the Ruby syntax file caused people to have slowdowns in the past. (Also see [242]Debugging syntax files.)
    2. Screen redraws. Some features force all lines to redraw.

   Typical culprit Why? Solution?

   ┌────────────────────────┬───────────────────────────────────────────────────────────────────────────────────┐
   │ :set cursorline        │ Causes all lines to redraw. :set nocursorline                                     │
   ├────────────────────────┼───────────────────────────────────────────────────────────────────────────────────┤
   │ :set cursorcolumn      │ Causes all lines to redraw. :set nocursorcolumn                                   │
   ├────────────────────────┼───────────────────────────────────────────────────────────────────────────────────┤
   │ :set relativenumber    │ Causes all lines to redraw. :set norelativenumber                                 │
   ├────────────────────────┼───────────────────────────────────────────────────────────────────────────────────┤
   │ :set foldmethod=syntax │ If the syntax file is slow already, this makes it even worse.                     │
   │                        │ :set foldmethod=manual, :set foldmethod=marker or [243]FastFold                   │
   ├────────────────────────┼───────────────────────────────────────────────────────────────────────────────────┤
   │ :set synmaxcol=3000    │ Due to internal representation, Vim has problems with long lines in general.      │
   │                        │ Highlights columns till column 3000. :set synmaxcol=200                           │
   ├────────────────────────┼───────────────────────────────────────────────────────────────────────────────────┤
   │ matchparen.vim         │ Loaded by default. Uses regular expressions to find the accompanying parenthesis. │
   │                        │ Disable plugin: :h matchparen                                                     │
   └────────────────────────┴───────────────────────────────────────────────────────────────────────────────────┘

   NOTE: You only need to do this if you experience actual performance drawbacks.
   In most cases using the things mentioned above is absolutely fine.

Editing huge files is slow

   The biggest issue with big files is, that Vim reads the whole file at once.
   This is done due to how buffers are represented internally.

   If you only want to read, tail hugefile | vim - is a good workaround.

   If you can live without syntax, settings and plugins for the moment:

        vim -u NONE -N

   This should make navigation quite a lot faster, especially since no expensive
   regular expressions  for syntax highlighting  are used. You should  also tell
   Vim not to use swapfiles and viminfo files to avoid long delays on writing:

        vim -n -u NONE -i NONE -N

   Putting it in a nutshell, try to avoid using Vim when intending to write really huge files. :\

Newline used for NUL

   NUL characters (\0) in a file, are stored as newline (\n) in memory and displayed in a buffer as ^@.

   See man 7 ascii and :h NL-used-for-Nul for more information.

==============================================================================
Temporary files
Backup files

Before  saving a  file,  Vim creates  a  backup  file. If  writing  to disk  was
successful, the backup file will be deleted.

With :set  backup, the  backup will  persist. This means,  the backup  file will
always have the same  content as the original file before  the most recent save.
It's up to you to decide whether this is useful or not.

You  can disable  backups entirely  with  :set nobackup  nowritebackup, but  you
shouldn't need to nowadays. 'writebackup' is  a security feature that makes sure
that you  don't lose the original  file in case  saving it should ever  fail, no
matter whether you keep the backup file afterwards or not.

If you frequently  use Vim to edit  huge files, and you  probably shouldn't, you
can exclude those from backups with 'backupskip'.

Vim knows different ways to create a backup: copying and renaming.

    Copying
        A full copy of the original file is created and used as backup.
        The original file gets emptied and then filled with the content of the Vim buffer.
    Renaming
        The original file is renamed to the backup file.
        The content of the Vim buffer gets written to a new file with the name of the original file.

See :h 'backupcopy' for all the nitty-gritty details.

Demo:

        :set backup backupskip= backupdir=. backupext=-backup
        :e /tmp/foo
        ifoo<esc>
        :w
        " original file gets created, no need for backup file
        obar<esc>
        :w
        " backup file is created, original file gets updated

$ diff -u /tmp/foo-backup /tmp/foo
--- /tmp/foo-backup     2017-04-22 15:05:13.000000000 +0200
+++ /tmp/foo    2017-04-22 15:05:25.000000000 +0200
@@ -1 +1,2 @@
 foo
+bar

:h backup
:h write-fail

Swap files

When editing a file, unsaved changes get written to a swap file.

Get the name of the current swap file with :swapname. Disable them with :set noswapfile.

A swap file gets updated either all 200 characters or when nothing was typed for
4 seconds. They get deleted when you stop editing the file. You can change these
numbers with :h 'updatecount' and :h 'updatetime'.

If Vim gets killed (e.g. power outage), you lose all changes since the last time
the file was  written to disk, but the  swap file won't be deleted.  Now, if you
edit the file again, Vim will offer the chance to recover the file from the swap
file.

When two persons try to edit the same  file, the second person will get a notice
that  the swap  file already  exists.  It prevents  people from  trying to  save
different  versions  of  a file.  If  you  don't  want  that behaviour,  see  :h
'directory'.

:h swap-file
:h usr_11

Undo files

The undo tree is kept in memory and will  be lost when Vim quits. If you want it
to  persist,  :set  undofile. This  will  save  the  undo  file for  ~/foo.c  in
~/foo.c.un~.

:h 'undofile'
:h undo-persistence

Viminfo files

When backup, swap,  and undo files are  all about text state,  viminfo files are
used for saving everything else that  would otherwise be lost when quitting Vim.
The  viminfo file  keeps  histories (command  line,  search, input),  registers,
marks, buffer list, global variables etc.

By default, the viminfo is written to ~/.viminfo.

:h viminfo
:h 'viminfo'

Example configuration for temporary files

Put all temporary files in their own directory under ~/.vim/files:

" create directory if needed
if !isdirectory($HOME.'/.vim/files') && exists('*mkdir')
  call mkdir($HOME.'/.vim/files')
endif

" backup files
set backup
set backupdir   =$HOME/.vim/files/backup/
set backupext   =-vimbackup
set backupskip  =
" swap files
set directory   =$HOME/.vim/files/swap//
set updatecount =100
" undo files
set undofile
set undodir     =$HOME/.vim/files/undo/
" viminfo files
set viminfo     ='100,n$HOME/.vim/files/info/viminfo
